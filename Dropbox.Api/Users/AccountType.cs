// <auto-generated>
// Auto-generated by BabelAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Users
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Babel;

    /// <summary>
    /// <para>What type of account this user has.</para>
    /// </summary>
    public class AccountType : enc.IEncodable<AccountType>
    {
        /// <summary>
        /// <para>Initializes a new instance of the <see cref="AccountType" /> class.</para>
        /// </summary>
        public AccountType()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Basic</para>
        /// </summary>
        public bool IsBasic
        {
            get
            {
                return this is Basic;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Basic, or <c>null</c>.</para>
        /// </summary>
        public Basic AsBasic
        {
            get
            {
                return this as Basic;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Pro</para>
        /// </summary>
        public bool IsPro
        {
            get
            {
                return this is Pro;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Pro, or <c>null</c>.</para>
        /// </summary>
        public Pro AsPro
        {
            get
            {
                return this as Pro;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Business</para>
        /// </summary>
        public bool IsBusiness
        {
            get
            {
                return this is Business;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Business, or <c>null</c>.</para>
        /// </summary>
        public Business AsBusiness
        {
            get
            {
                return this as Business;
            }
        }

        #region IEncodable<AccountType> methods

        /// <summary>
        /// <para>Encodes the object using the supplied encoder.</para>
        /// </summary>
        /// <param name="encoder">The encoder being used to serialize the object.</param>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        void enc.IEncodable<AccountType>.Encode(enc.IEncoder encoder)
        {
            if (this.IsBasic)
            {
                ((enc.IEncodable<Basic>)this).Encode(encoder);
            }
            else if (this.IsPro)
            {
                ((enc.IEncodable<Pro>)this).Encode(encoder);
            }
            else if (this.IsBusiness)
            {
                ((enc.IEncodable<Business>)this).Encode(encoder);
            }
            else
            {
                throw new sys.InvalidOperationException();
            }
        }

        /// <summary>
        /// <para>Decodes on object using the supplied decoder.</para>
        /// </summary>
        /// <param name="decoder">The decoder used to deserialize the object.</param>
        /// <returns>The deserialized object. Note: this is not necessarily the current
        /// instance.</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        AccountType enc.IEncodable<AccountType>.Decode(enc.IDecoder decoder)
        {
            switch (decoder.GetUnionName())
            {
            case "basic":
                return Basic.Instance;
            case "pro":
                return Pro.Instance;
            case "business":
                return Business.Instance;
            default:
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        /// <summary>
        /// <para>The basic account type.</para>
        /// </summary>
        public sealed class Basic : AccountType, enc.IEncodable<Basic>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Basic" /> class.</para>
            /// </summary>
            private Basic()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Basic</para>
            /// </summary>
            public static readonly Basic Instance = new Basic();

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            void enc.IEncodable<Basic>.Encode(enc.IEncoder encoder)
            {
                using (var obj = encoder.AddObject())
                {
                    obj.AddField(".tag", "basic");
                }
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            Basic enc.IEncodable<Basic>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }

        /// <summary>
        /// <para>The Dropbox Pro account type.</para>
        /// </summary>
        public sealed class Pro : AccountType, enc.IEncodable<Pro>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Pro" /> class.</para>
            /// </summary>
            private Pro()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Pro</para>
            /// </summary>
            public static readonly Pro Instance = new Pro();

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            void enc.IEncodable<Pro>.Encode(enc.IEncoder encoder)
            {
                using (var obj = encoder.AddObject())
                {
                    obj.AddField(".tag", "pro");
                }
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            Pro enc.IEncodable<Pro>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }

        /// <summary>
        /// <para>The Dropbox for Business account type.</para>
        /// </summary>
        public sealed class Business : AccountType, enc.IEncodable<Business>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Business" /> class.</para>
            /// </summary>
            private Business()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Business</para>
            /// </summary>
            public static readonly Business Instance = new Business();

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            void enc.IEncodable<Business>.Encode(enc.IEncoder encoder)
            {
                using (var obj = encoder.AddObject())
                {
                    obj.AddField(".tag", "business");
                }
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            Business enc.IEncodable<Business>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }
    }
}

// <auto-generated>
// Auto-generated by BabelAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Babel;

    /// <summary>
    /// <para>Arguments for <see cref="Dropbox.Api.Files.Routes.FilesRoutes.UploadAsync" />.
    /// Also part of the arguments to <see
    /// cref="Dropbox.Api.Files.Routes.FilesRoutes.UploadSessionFinishAsync" />.</para>
    /// </summary>
    /// <seealso cref="UploadSessionFinishArg" />
    public sealed class CommitInfo : enc.IEncodable<CommitInfo>
    {
        /// <summary>
        /// <para>Initializes a new instance of the <see cref="CommitInfo" /> class.</para>
        /// </summary>
        /// <param name="path">Path in the user's Dropbox to save the file.</param>
        /// <param name="mode">Selects what to do if the file already exists.</param>
        /// <param name="autorename">If there's a conflict, as determined by <paramref
        /// name="mode" />, have the Dropbox server try to autorename the file to avoid
        /// conflict.</param>
        /// <param name="clientModified">The value to store as the <paramref
        /// name="clientModified" /> timestamp. Dropbox automatically records the time at which
        /// the file was written to the Dropbox servers. It can also record an additional
        /// timestamp, provided by Dropbox desktop clients, mobile clients, and API apps of
        /// when the file was actually created or modified.</param>
        /// <param name="mute">Normally, users are made aware of any file modifications in
        /// their Dropbox account via notifications in the client software. If <c>true</c>,
        /// this tells the clients that this modification shouldn't result in a user
        /// notification.</param>
        public CommitInfo(string path,
                          WriteMode mode = null,
                          bool autorename = false,
                          sys.DateTime? clientModified = null,
                          bool mute = false)
        {
            if (path == null)
            {
                throw new sys.ArgumentNullException("path");
            }

            if (mode == null)
            {
                mode = WriteMode.Add.Instance;
            }

            this.Path = path;
            this.Mode = mode;
            this.Autorename = autorename;
            this.ClientModified = clientModified;
            this.Mute = mute;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="CommitInfo" /> class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        public CommitInfo()
        {
            this.Mode = WriteMode.Add.Instance;
            this.Autorename = false;
            this.Mute = false;
        }

        /// <summary>
        /// <para>Path in the user's Dropbox to save the file.</para>
        /// </summary>
        public string Path { get; private set; }

        /// <summary>
        /// <para>Selects what to do if the file already exists.</para>
        /// </summary>
        public WriteMode Mode { get; private set; }

        /// <summary>
        /// <para>If there's a conflict, as determined by <see cref="Mode" />, have the Dropbox
        /// server try to autorename the file to avoid conflict.</para>
        /// </summary>
        public bool Autorename { get; private set; }

        /// <summary>
        /// <para>The value to store as the <see cref="ClientModified" /> timestamp. Dropbox
        /// automatically records the time at which the file was written to the Dropbox
        /// servers. It can also record an additional timestamp, provided by Dropbox desktop
        /// clients, mobile clients, and API apps of when the file was actually created or
        /// modified.</para>
        /// </summary>
        public sys.DateTime? ClientModified { get; private set; }

        /// <summary>
        /// <para>Normally, users are made aware of any file modifications in their Dropbox
        /// account via notifications in the client software. If <c>true</c>, this tells the
        /// clients that this modification shouldn't result in a user notification.</para>
        /// </summary>
        public bool Mute { get; private set; }

        #region IEncodable<CommitInfo> methods

        /// <summary>
        /// <para>Encodes the object using the supplied encoder.</para>
        /// </summary>
        /// <param name="encoder">The encoder being used to serialize the object.</param>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        void enc.IEncodable<CommitInfo>.Encode(enc.IEncoder encoder)
        {
            using (var obj = encoder.AddObject())
            {
                obj.AddField<string>("path", this.Path);
                obj.AddFieldObject<WriteMode>("mode", this.Mode);
                obj.AddField<bool>("autorename", this.Autorename);
                if (this.ClientModified != null)
                {
                    obj.AddField<sys.DateTime>("client_modified", this.ClientModified.Value);
                }
                obj.AddField<bool>("mute", this.Mute);
            }
        }

        /// <summary>
        /// <para>Decodes on object using the supplied decoder.</para>
        /// </summary>
        /// <param name="decoder">The decoder used to deserialize the object.</param>
        /// <returns>The deserialized object. Note: this is not necessarily the current
        /// instance.</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        CommitInfo enc.IEncodable<CommitInfo>.Decode(enc.IDecoder decoder)
        {
            using (var obj = decoder.GetObject())
            {
                this.Path = obj.GetField<string>("path");
                if (obj.HasField("mode"))
                {
                    this.Mode = obj.GetFieldObject<WriteMode>("mode");
                }
                if (obj.HasField("autorename"))
                {
                    this.Autorename = obj.GetField<bool>("autorename");
                }
                if (obj.HasField("client_modified"))
                {
                    this.ClientModified = obj.GetField<sys.DateTime>("client_modified");
                }
                if (obj.HasField("mute"))
                {
                    this.Mute = obj.GetField<bool>("mute");
                }
            }

            return this;
        }

        #endregion
    }
}

// <auto-generated>
// Auto-generated by BabelAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Babel;

    /// <summary>
    /// <para>The search query object</para>
    /// </summary>
    public sealed class SearchQuery : enc.IEncodable<SearchQuery>
    {
        /// <summary>
        /// <para>Initializes a new instance of the <see cref="SearchQuery" /> class.</para>
        /// </summary>
        /// <param name="path">The path in the user's Dropbox to search.</param>
        /// <param name="query">The string to search for. The search string is split on spaces
        /// into multiple tokens. For file name searching, the last token is used for prefix
        /// matching (i.e. "bat c" matches "bat cave" but not "batman car").</param>
        /// <param name="start">The starting index within the search results (used for
        /// paging).</param>
        /// <param name="maxResults">The maximum number of search results to return.</param>
        /// <param name="mode">The mode</param>
        public SearchQuery(string path,
                           string query,
                           ulong start = 0,
                           ulong maxResults = 100,
                           SearchMode mode = null)
        {
            if (path == null)
            {
                throw new sys.ArgumentNullException("path");
            }

            if (query == null)
            {
                throw new sys.ArgumentNullException("query");
            }

            if (maxResults < 1UL || maxResults > 1000UL)
            {
                throw new sys.ArgumentOutOfRangeException("maxResults");
            }

            if (mode == null)
            {
                mode = SearchMode.Filename.Instance;
            }

            this.Path = path;
            this.Query = query;
            this.Start = start;
            this.MaxResults = maxResults;
            this.Mode = mode;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="SearchQuery" /> class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        public SearchQuery()
        {
            this.Start = 0;
            this.MaxResults = 100;
            this.Mode = SearchMode.Filename.Instance;
        }

        /// <summary>
        /// <para>The path in the user's Dropbox to search.</para>
        /// </summary>
        public string Path { get; private set; }

        /// <summary>
        /// <para>The string to search for. The search string is split on spaces into multiple
        /// tokens. For file name searching, the last token is used for prefix matching (i.e.
        /// "bat c" matches "bat cave" but not "batman car").</para>
        /// </summary>
        public string Query { get; private set; }

        /// <summary>
        /// <para>The starting index within the search results (used for paging).</para>
        /// </summary>
        public ulong Start { get; private set; }

        /// <summary>
        /// <para>The maximum number of search results to return.</para>
        /// </summary>
        public ulong MaxResults { get; private set; }

        /// <summary>
        /// <para>Gets the mode of the search query</para>
        /// </summary>
        public SearchMode Mode { get; private set; }

        #region IEncodable<SearchQuery> methods

        /// <summary>
        /// <para>Encodes the object using the supplied encoder.</para>
        /// </summary>
        /// <param name="encoder">The encoder being used to serialize the object.</param>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        void enc.IEncodable<SearchQuery>.Encode(enc.IEncoder encoder)
        {
            using (var obj = encoder.AddObject())
            {
                obj.AddField<string>("path", this.Path);
                obj.AddField<string>("query", this.Query);
                obj.AddField<ulong>("start", this.Start);
                obj.AddField<ulong>("max_results", this.MaxResults);
                obj.AddFieldObject<SearchMode>("mode", this.Mode);
            }
        }

        /// <summary>
        /// <para>Decodes on object using the supplied decoder.</para>
        /// </summary>
        /// <param name="decoder">The decoder used to deserialize the object.</param>
        /// <returns>The deserialized object. Note: this is not necessarily the current
        /// instance.</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        SearchQuery enc.IEncodable<SearchQuery>.Decode(enc.IDecoder decoder)
        {
            using (var obj = decoder.GetObject())
            {
                this.Path = obj.GetField<string>("path");
                this.Query = obj.GetField<string>("query");
                if (obj.HasField("start"))
                {
                    this.Start = obj.GetField<ulong>("start");
                }
                if (obj.HasField("max_results"))
                {
                    this.MaxResults = obj.GetField<ulong>("max_results");
                }
                if (obj.HasField("mode"))
                {
                    this.Mode = obj.GetFieldObject<SearchMode>("mode");
                }

                return this;
            }
        }

        #endregion
    }
}

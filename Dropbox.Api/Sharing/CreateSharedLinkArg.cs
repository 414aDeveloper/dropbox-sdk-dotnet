// <auto-generated>
// Auto-generated by BabelAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Sharing
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Babel;

    /// <summary>
    /// <para>Arguments for <see
    /// cref="Dropbox.Api.Sharing.Routes.SharingRoutes.CreateSharedLinkAsync" />.</para>
    /// </summary>
    public sealed class CreateSharedLinkArg : enc.IEncodable<CreateSharedLinkArg>
    {
        /// <summary>
        /// <para>Initializes a new instance of the <see cref="CreateSharedLinkArg" />
        /// class.</para>
        /// </summary>
        /// <param name="path">The path to share.</param>
        /// <param name="shortUrl">Whether to return a shortened URL.</param>
        /// <param name="pendingUpload">If it's okay to share a path that does not yet exist,
        /// set this to either 'file' or 'folder' to indicate whether to assume it's a file or
        /// folder.</param>
        public CreateSharedLinkArg(string path,
                                   bool shortUrl = false,
                                   PendingUploadMode pendingUpload = null)
        {
            if (path == null)
            {
                throw new sys.ArgumentNullException("path");
            }

            this.Path = path;
            this.ShortUrl = shortUrl;
            this.PendingUpload = pendingUpload;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="CreateSharedLinkArg" />
        /// class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        public CreateSharedLinkArg()
        {
            this.ShortUrl = false;
        }

        /// <summary>
        /// <para>The path to share.</para>
        /// </summary>
        public string Path { get; private set; }

        /// <summary>
        /// <para>Whether to return a shortened URL.</para>
        /// </summary>
        public bool ShortUrl { get; private set; }

        /// <summary>
        /// <para>If it's okay to share a path that does not yet exist, set this to either
        /// 'file' or 'folder' to indicate whether to assume it's a file or folder.</para>
        /// </summary>
        public PendingUploadMode PendingUpload { get; private set; }

        #region IEncodable<CreateSharedLinkArg> methods

        /// <summary>
        /// <para>Encodes the object using the supplied encoder.</para>
        /// </summary>
        /// <param name="encoder">The encoder being used to serialize the object.</param>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        void enc.IEncodable<CreateSharedLinkArg>.Encode(enc.IEncoder encoder)
        {
            using (var obj = encoder.AddObject())
            {
                obj.AddField<string>("path", this.Path);
                obj.AddField<bool>("short_url", this.ShortUrl);
                if (this.PendingUpload != null)
                {
                    obj.AddFieldObject<PendingUploadMode>("pending_upload", this.PendingUpload);
                }
            }
        }

        /// <summary>
        /// <para>Decodes on object using the supplied decoder.</para>
        /// </summary>
        /// <param name="decoder">The decoder used to deserialize the object.</param>
        /// <returns>The deserialized object. Note: this is not necessarily the current
        /// instance.</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        CreateSharedLinkArg enc.IEncodable<CreateSharedLinkArg>.Decode(enc.IDecoder decoder)
        {
            using (var obj = decoder.GetObject())
            {
                this.Path = obj.GetField<string>("path");
                if (obj.HasField("short_url"))
                {
                    this.ShortUrl = obj.GetField<bool>("short_url");
                }
                if (obj.HasField("pending_upload"))
                {
                    this.PendingUpload = obj.GetFieldObject<PendingUploadMode>("pending_upload");
                }
            }

            return this;
        }

        #endregion
    }
}

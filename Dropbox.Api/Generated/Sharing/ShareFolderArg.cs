// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Sharing
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The share folder arg object</para>
    /// </summary>
    public class ShareFolderArg
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<ShareFolderArg> Encoder = new ShareFolderArgEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<ShareFolderArg> Decoder = new ShareFolderArgDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="ShareFolderArg" /> class.</para>
        /// </summary>
        /// <param name="path">The path to the folder to share. If it does not exist, then a
        /// new one is created.</param>
        /// <param name="memberPolicy">Who can be a member of this shared folder. Only
        /// applicable if the current user is on a team.</param>
        /// <param name="aclUpdatePolicy">Who can add and remove members of this shared
        /// folder.</param>
        /// <param name="sharedLinkPolicy">The policy to apply to shared links created for
        /// content inside this shared folder.  The current user must be on a team to set this
        /// policy to <see cref="Dropbox.Api.Sharing.SharedLinkPolicy.Members" />.</param>
        /// <param name="forceAsync">Whether to force the share to happen
        /// asynchronously.</param>
        /// <param name="actions">This is a list indicating whether each returned folder data
        /// entry will include a boolean field <see
        /// cref="Dropbox.Api.Sharing.FolderPermission.Allow" /> that describes whether the
        /// current user can perform the `FolderAction` on the folder.</param>
        /// <param name="linkSettings">Settings on the link for this folder.</param>
        /// <param name="viewerInfoPolicy">Who can enable/disable viewer info for this shared
        /// folder.</param>
        public ShareFolderArg(string path,
                              MemberPolicy memberPolicy = null,
                              AclUpdatePolicy aclUpdatePolicy = null,
                              SharedLinkPolicy sharedLinkPolicy = null,
                              bool forceAsync = false,
                              col.IEnumerable<FolderAction> actions = null,
                              LinkSettings linkSettings = null,
                              ViewerInfoPolicy viewerInfoPolicy = null)
        {
            if (path == null)
            {
                throw new sys.ArgumentNullException("path");
            }
            if (!re.Regex.IsMatch(path, @"\A(?:(/(.|[\r\n])*)|(ns:[0-9]+(/.*)?))\z"))
            {
                throw new sys.ArgumentOutOfRangeException("path", @"Value should match pattern '\A(?:(/(.|[\r\n])*)|(ns:[0-9]+(/.*)?))\z'");
            }

            var actionsList = enc.Util.ToList(actions);

            this.Path = path;
            this.MemberPolicy = memberPolicy;
            this.AclUpdatePolicy = aclUpdatePolicy;
            this.SharedLinkPolicy = sharedLinkPolicy;
            this.ForceAsync = forceAsync;
            this.Actions = actionsList;
            this.LinkSettings = linkSettings;
            this.ViewerInfoPolicy = viewerInfoPolicy;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="ShareFolderArg" /> class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public ShareFolderArg()
        {
            this.ForceAsync = false;
        }

        /// <summary>
        /// <para>The path to the folder to share. If it does not exist, then a new one is
        /// created.</para>
        /// </summary>
        public string Path { get; protected set; }

        /// <summary>
        /// <para>Who can be a member of this shared folder. Only applicable if the current
        /// user is on a team.</para>
        /// </summary>
        public MemberPolicy MemberPolicy { get; protected set; }

        /// <summary>
        /// <para>Who can add and remove members of this shared folder.</para>
        /// </summary>
        public AclUpdatePolicy AclUpdatePolicy { get; protected set; }

        /// <summary>
        /// <para>The policy to apply to shared links created for content inside this shared
        /// folder.  The current user must be on a team to set this policy to <see
        /// cref="Dropbox.Api.Sharing.SharedLinkPolicy.Members" />.</para>
        /// </summary>
        public SharedLinkPolicy SharedLinkPolicy { get; protected set; }

        /// <summary>
        /// <para>Whether to force the share to happen asynchronously.</para>
        /// </summary>
        public bool ForceAsync { get; protected set; }

        /// <summary>
        /// <para>This is a list indicating whether each returned folder data entry will
        /// include a boolean field <see cref="Dropbox.Api.Sharing.FolderPermission.Allow" />
        /// that describes whether the current user can perform the `FolderAction` on the
        /// folder.</para>
        /// </summary>
        public col.IList<FolderAction> Actions { get; protected set; }

        /// <summary>
        /// <para>Settings on the link for this folder.</para>
        /// </summary>
        public LinkSettings LinkSettings { get; protected set; }

        /// <summary>
        /// <para>Who can enable/disable viewer info for this shared folder.</para>
        /// </summary>
        public ViewerInfoPolicy ViewerInfoPolicy { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="ShareFolderArg" />.</para>
        /// </summary>
        private class ShareFolderArgEncoder : enc.StructEncoder<ShareFolderArg>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(ShareFolderArg value, enc.IJsonWriter writer)
            {
                WriteProperty("path", value.Path, writer, enc.StringEncoder.Instance);
                if (value.MemberPolicy != null)
                {
                    WriteProperty("member_policy", value.MemberPolicy, writer, Dropbox.Api.Sharing.MemberPolicy.Encoder);
                }
                if (value.AclUpdatePolicy != null)
                {
                    WriteProperty("acl_update_policy", value.AclUpdatePolicy, writer, Dropbox.Api.Sharing.AclUpdatePolicy.Encoder);
                }
                if (value.SharedLinkPolicy != null)
                {
                    WriteProperty("shared_link_policy", value.SharedLinkPolicy, writer, Dropbox.Api.Sharing.SharedLinkPolicy.Encoder);
                }
                WriteProperty("force_async", value.ForceAsync, writer, enc.BooleanEncoder.Instance);
                if (value.Actions.Count > 0)
                {
                    WriteListProperty("actions", value.Actions, writer, Dropbox.Api.Sharing.FolderAction.Encoder);
                }
                if (value.LinkSettings != null)
                {
                    WriteProperty("link_settings", value.LinkSettings, writer, Dropbox.Api.Sharing.LinkSettings.Encoder);
                }
                if (value.ViewerInfoPolicy != null)
                {
                    WriteProperty("viewer_info_policy", value.ViewerInfoPolicy, writer, Dropbox.Api.Sharing.ViewerInfoPolicy.Encoder);
                }
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="ShareFolderArg" />.</para>
        /// </summary>
        private class ShareFolderArgDecoder : enc.StructDecoder<ShareFolderArg>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="ShareFolderArg" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override ShareFolderArg Create()
            {
                return new ShareFolderArg();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(ShareFolderArg value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "path":
                        value.Path = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "member_policy":
                        value.MemberPolicy = Dropbox.Api.Sharing.MemberPolicy.Decoder.Decode(reader);
                        break;
                    case "acl_update_policy":
                        value.AclUpdatePolicy = Dropbox.Api.Sharing.AclUpdatePolicy.Decoder.Decode(reader);
                        break;
                    case "shared_link_policy":
                        value.SharedLinkPolicy = Dropbox.Api.Sharing.SharedLinkPolicy.Decoder.Decode(reader);
                        break;
                    case "force_async":
                        value.ForceAsync = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    case "actions":
                        value.Actions = ReadList<FolderAction>(reader, Dropbox.Api.Sharing.FolderAction.Decoder);
                        break;
                    case "link_settings":
                        value.LinkSettings = Dropbox.Api.Sharing.LinkSettings.Decoder.Decode(reader);
                        break;
                    case "viewer_info_policy":
                        value.ViewerInfoPolicy = Dropbox.Api.Sharing.ViewerInfoPolicy.Decoder.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}

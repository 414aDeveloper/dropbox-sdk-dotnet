// <auto-generated>
// Auto-generated by BabelAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Babel;

    /// <summary>
    /// <para>Errors from <see cref="Dropbox.Api.Files.Routes.FilesRoutes.UploadAsync"
    /// />.</para>
    /// </summary>
    public class CommitError : enc.IEncodable<CommitError>
    {
        /// <summary>
        /// <para>Initializes a new instance of the <see cref="CommitError" /> class.</para>
        /// </summary>
        public CommitError()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Conflict</para>
        /// </summary>
        public bool IsConflict
        {
            get
            {
                return this is Conflict;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Conflict, or <c>null</c>.</para>
        /// </summary>
        public Conflict AsConflict
        {
            get
            {
                return this as Conflict;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is NoWritePermission</para>
        /// </summary>
        public bool IsNoWritePermission
        {
            get
            {
                return this is NoWritePermission;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a NoWritePermission, or <c>null</c>.</para>
        /// </summary>
        public NoWritePermission AsNoWritePermission
        {
            get
            {
                return this as NoWritePermission;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is InsufficientQuota</para>
        /// </summary>
        public bool IsInsufficientQuota
        {
            get
            {
                return this is InsufficientQuota;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a InsufficientQuota, or <c>null</c>.</para>
        /// </summary>
        public InsufficientQuota AsInsufficientQuota
        {
            get
            {
                return this as InsufficientQuota;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region IEncodable<CommitError> methods

        /// <summary>
        /// <para>Encodes the object using the supplied encoder.</para>
        /// </summary>
        /// <param name="encoder">The encoder being used to serialize the object.</param>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        void enc.IEncodable<CommitError>.Encode(enc.IEncoder encoder)
        {
            if (this.IsConflict)
            {
                ((enc.IEncodable<Conflict>)this).Encode(encoder);
            }
            else if (this.IsNoWritePermission)
            {
                ((enc.IEncodable<NoWritePermission>)this).Encode(encoder);
            }
            else if (this.IsInsufficientQuota)
            {
                ((enc.IEncodable<InsufficientQuota>)this).Encode(encoder);
            }
            else
            {
                ((enc.IEncodable<Other>)this).Encode(encoder);
            }
        }

        /// <summary>
        /// <para>Decodes on object using the supplied decoder.</para>
        /// </summary>
        /// <param name="decoder">The decoder used to deserialize the object.</param>
        /// <returns>The deserialized object. Note: this is not necessarily the current
        /// instance.</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        CommitError enc.IEncodable<CommitError>.Decode(enc.IDecoder decoder)
        {
            switch (decoder.GetUnionName())
            {
            case "conflict":
                using (var obj = decoder.GetObject())
                {
                    return new Conflict(obj.GetFieldObject<CommitConflictError>("conflict"));
                }
            case "no_write_permission":
                return NoWritePermission.Instance;
            case "insufficient_quota":
                return InsufficientQuota.Instance;
            default:
                return Other.Instance;
            }
        }

        #endregion

        /// <summary>
        /// <para>A conflict prevented the commit. See the value for the reason.</para>
        /// </summary>
        public sealed class Conflict : CommitError, enc.IEncodable<Conflict>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Conflict" /> class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public Conflict(CommitConflictError value)
            {
                this.Value = value;
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public CommitConflictError Value { get; private set; }

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            void enc.IEncodable<Conflict>.Encode(enc.IEncoder encoder)
            {
                using (var obj = encoder.AddObject())
                {
                    obj.AddField(".tag", "conflict");
                    obj.AddField("conflict", this.Value);
                }
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            Conflict enc.IEncodable<Conflict>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }

        /// <summary>
        /// <para>User does not have permission to write in the folder. An example of this is
        /// if the folder is a read-only shared folder.</para>
        /// </summary>
        public sealed class NoWritePermission : CommitError, enc.IEncodable<NoWritePermission>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="NoWritePermission" />
            /// class.</para>
            /// </summary>
            private NoWritePermission()
            {
            }

            /// <summary>
            /// <para>A singleton instance of NoWritePermission</para>
            /// </summary>
            public static readonly NoWritePermission Instance = new NoWritePermission();

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            void enc.IEncodable<NoWritePermission>.Encode(enc.IEncoder encoder)
            {
                using (var obj = encoder.AddObject())
                {
                    obj.AddField(".tag", "no_write_permission");
                }
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            NoWritePermission enc.IEncodable<NoWritePermission>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }

        /// <summary>
        /// <para>User does not have sufficient space quota to save the file.</para>
        /// </summary>
        public sealed class InsufficientQuota : CommitError, enc.IEncodable<InsufficientQuota>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="InsufficientQuota" />
            /// class.</para>
            /// </summary>
            private InsufficientQuota()
            {
            }

            /// <summary>
            /// <para>A singleton instance of InsufficientQuota</para>
            /// </summary>
            public static readonly InsufficientQuota Instance = new InsufficientQuota();

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            void enc.IEncodable<InsufficientQuota>.Encode(enc.IEncoder encoder)
            {
                using (var obj = encoder.AddObject())
                {
                    obj.AddField(".tag", "insufficient_quota");
                }
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            InsufficientQuota enc.IEncodable<InsufficientQuota>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }

        /// <summary>
        /// <para>An unspecified error.</para>
        /// </summary>
        public sealed class Other : CommitError, enc.IEncodable<Other>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            void enc.IEncodable<Other>.Encode(enc.IEncoder encoder)
            {
                using (var obj = encoder.AddObject())
                {
                    obj.AddField(".tag", "other");
                }
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            Other enc.IEncodable<Other>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }
    }
}

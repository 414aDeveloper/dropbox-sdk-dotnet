// <auto-generated>
// Auto-generated by BabelAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Babel;

    /// <summary>
    /// <para>Indicates what type of match was found for a given item.</para>
    /// </summary>
    public class SearchMatchType : enc.IEncodable<SearchMatchType>
    {
        /// <summary>
        /// <para>Initializes a new instance of the <see cref="SearchMatchType" />
        /// class.</para>
        /// </summary>
        public SearchMatchType()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Filename</para>
        /// </summary>
        public bool IsFilename
        {
            get
            {
                return this is Filename;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Filename, or <c>null</c>.</para>
        /// </summary>
        public Filename AsFilename
        {
            get
            {
                return this as Filename;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Content</para>
        /// </summary>
        public bool IsContent
        {
            get
            {
                return this is Content;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Content, or <c>null</c>.</para>
        /// </summary>
        public Content AsContent
        {
            get
            {
                return this as Content;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Both</para>
        /// </summary>
        public bool IsBoth
        {
            get
            {
                return this is Both;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Both, or <c>null</c>.</para>
        /// </summary>
        public Both AsBoth
        {
            get
            {
                return this as Both;
            }
        }

        #region IEncodable<SearchMatchType> methods

        /// <summary>
        /// <para>Encodes the object using the supplied encoder.</para>
        /// </summary>
        /// <param name="encoder">The encoder being used to serialize the object.</param>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        void enc.IEncodable<SearchMatchType>.Encode(enc.IEncoder encoder)
        {
            if (this.IsFilename)
            {
                ((enc.IEncodable<Filename>)this).Encode(encoder);
            }
            else if (this.IsContent)
            {
                ((enc.IEncodable<Content>)this).Encode(encoder);
            }
            else if (this.IsBoth)
            {
                ((enc.IEncodable<Both>)this).Encode(encoder);
            }
            else
            {
                throw new sys.InvalidOperationException();
            }
        }

        /// <summary>
        /// <para>Decodes on object using the supplied decoder.</para>
        /// </summary>
        /// <param name="decoder">The decoder used to deserialize the object.</param>
        /// <returns>The deserialized object. Note: this is not necessarily the current
        /// instance.</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        SearchMatchType enc.IEncodable<SearchMatchType>.Decode(enc.IDecoder decoder)
        {
            switch (decoder.GetUnionName())
            {
            case "filename":
                return Filename.Instance;
            case "content":
                return Content.Instance;
            case "both":
                return Both.Instance;
            default:
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        /// <summary>
        /// <para>This item was matched on its file or folder name.</para>
        /// </summary>
        public sealed class Filename : SearchMatchType, enc.IEncodable<Filename>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Filename" /> class.</para>
            /// </summary>
            private Filename()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Filename</para>
            /// </summary>
            public static readonly Filename Instance = new Filename();

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            void enc.IEncodable<Filename>.Encode(enc.IEncoder encoder)
            {
                using (var obj = encoder.AddObject())
                {
                    obj.AddField(".tag", "filename");
                }
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            Filename enc.IEncodable<Filename>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }

        /// <summary>
        /// <para>This item was matched based on its file contents.</para>
        /// </summary>
        public sealed class Content : SearchMatchType, enc.IEncodable<Content>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Content" /> class.</para>
            /// </summary>
            private Content()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Content</para>
            /// </summary>
            public static readonly Content Instance = new Content();

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            void enc.IEncodable<Content>.Encode(enc.IEncoder encoder)
            {
                using (var obj = encoder.AddObject())
                {
                    obj.AddField(".tag", "content");
                }
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            Content enc.IEncodable<Content>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }

        /// <summary>
        /// <para>This item was matched based on both its contents and its file name.</para>
        /// </summary>
        public sealed class Both : SearchMatchType, enc.IEncodable<Both>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Both" /> class.</para>
            /// </summary>
            private Both()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Both</para>
            /// </summary>
            public static readonly Both Instance = new Both();

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            void enc.IEncodable<Both>.Encode(enc.IEncoder encoder)
            {
                using (var obj = encoder.AddObject())
                {
                    obj.AddField(".tag", "both");
                }
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            Both enc.IEncodable<Both>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }
    }
}

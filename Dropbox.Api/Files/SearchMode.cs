// <auto-generated>
// Auto-generated by BabelAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Babel;

    /// <summary>
    /// <para>Select which type of data to search.</para>
    /// </summary>
    public class SearchMode : enc.IEncodable<SearchMode>
    {
        /// <summary>
        /// <para>Initializes a new instance of the <see cref="SearchMode" /> class.</para>
        /// </summary>
        public SearchMode()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Filename</para>
        /// </summary>
        public bool IsFilename
        {
            get
            {
                return this is Filename;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Filename, or <c>null</c>.</para>
        /// </summary>
        public Filename AsFilename
        {
            get
            {
                return this as Filename;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is FilenameAndContent</para>
        /// </summary>
        public bool IsFilenameAndContent
        {
            get
            {
                return this is FilenameAndContent;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a FilenameAndContent, or <c>null</c>.</para>
        /// </summary>
        public FilenameAndContent AsFilenameAndContent
        {
            get
            {
                return this as FilenameAndContent;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is DeletedFilename</para>
        /// </summary>
        public bool IsDeletedFilename
        {
            get
            {
                return this is DeletedFilename;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a DeletedFilename, or <c>null</c>.</para>
        /// </summary>
        public DeletedFilename AsDeletedFilename
        {
            get
            {
                return this as DeletedFilename;
            }
        }

        #region IEncodable<SearchMode> methods

        /// <summary>
        /// <para>Encodes the object using the supplied encoder.</para>
        /// </summary>
        /// <param name="encoder">The encoder being used to serialize the object.</param>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        void enc.IEncodable<SearchMode>.Encode(enc.IEncoder encoder)
        {
            if (this.IsFilename)
            {
                ((enc.IEncodable<Filename>)this).Encode(encoder);
            }
            else if (this.IsFilenameAndContent)
            {
                ((enc.IEncodable<FilenameAndContent>)this).Encode(encoder);
            }
            else if (this.IsDeletedFilename)
            {
                ((enc.IEncodable<DeletedFilename>)this).Encode(encoder);
            }
            else
            {
                throw new sys.InvalidOperationException();
            }
        }

        /// <summary>
        /// <para>Decodes on object using the supplied decoder.</para>
        /// </summary>
        /// <param name="decoder">The decoder used to deserialize the object.</param>
        /// <returns>The deserialized object. Note: this is not necessarily the current
        /// instance.</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        SearchMode enc.IEncodable<SearchMode>.Decode(enc.IDecoder decoder)
        {
            switch (decoder.GetUnionName())
            {
            case "filename":
                return Filename.Instance;
            case "filename_and_content":
                return FilenameAndContent.Instance;
            case "deleted_filename":
                return DeletedFilename.Instance;
            default:
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        /// <summary>
        /// <para>Search file and folder names.</para>
        /// </summary>
        public sealed class Filename : SearchMode, enc.IEncodable<Filename>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Filename" /> class.</para>
            /// </summary>
            private Filename()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Filename</para>
            /// </summary>
            public static readonly Filename Instance = new Filename();

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            void enc.IEncodable<Filename>.Encode(enc.IEncoder encoder)
            {
                using (var obj = encoder.AddObject())
                {
                    obj.AddField(".tag", "filename");
                }
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            Filename enc.IEncodable<Filename>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }

        /// <summary>
        /// <para>Search file and folder names as well as file contents.</para>
        /// </summary>
        public sealed class FilenameAndContent : SearchMode, enc.IEncodable<FilenameAndContent>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="FilenameAndContent" />
            /// class.</para>
            /// </summary>
            private FilenameAndContent()
            {
            }

            /// <summary>
            /// <para>A singleton instance of FilenameAndContent</para>
            /// </summary>
            public static readonly FilenameAndContent Instance = new FilenameAndContent();

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            void enc.IEncodable<FilenameAndContent>.Encode(enc.IEncoder encoder)
            {
                using (var obj = encoder.AddObject())
                {
                    obj.AddField(".tag", "filename_and_content");
                }
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            FilenameAndContent enc.IEncodable<FilenameAndContent>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }

        /// <summary>
        /// <para>Search for deleted file and folder names.</para>
        /// </summary>
        public sealed class DeletedFilename : SearchMode, enc.IEncodable<DeletedFilename>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="DeletedFilename" />
            /// class.</para>
            /// </summary>
            private DeletedFilename()
            {
            }

            /// <summary>
            /// <para>A singleton instance of DeletedFilename</para>
            /// </summary>
            public static readonly DeletedFilename Instance = new DeletedFilename();

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            void enc.IEncodable<DeletedFilename>.Encode(enc.IEncoder encoder)
            {
                using (var obj = encoder.AddObject())
                {
                    obj.AddField(".tag", "deleted_filename");
                }
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            DeletedFilename enc.IEncodable<DeletedFilename>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }
    }
}

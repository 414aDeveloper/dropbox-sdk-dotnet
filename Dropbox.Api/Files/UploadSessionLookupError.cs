// <auto-generated>
// Auto-generated by BabelAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Babel;

    /// <summary>
    /// <para>The upload session lookup error object</para>
    /// </summary>
    public class UploadSessionLookupError : enc.IEncodable<UploadSessionLookupError>
    {
        /// <summary>
        /// <para>Initializes a new instance of the <see cref="UploadSessionLookupError" />
        /// class.</para>
        /// </summary>
        public UploadSessionLookupError()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is NotFound</para>
        /// </summary>
        public bool IsNotFound
        {
            get
            {
                return this is NotFound;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a NotFound, or <c>null</c>.</para>
        /// </summary>
        public NotFound AsNotFound
        {
            get
            {
                return this as NotFound;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is IncorrectOffset</para>
        /// </summary>
        public bool IsIncorrectOffset
        {
            get
            {
                return this is IncorrectOffset;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a IncorrectOffset, or <c>null</c>.</para>
        /// </summary>
        public IncorrectOffset AsIncorrectOffset
        {
            get
            {
                return this as IncorrectOffset;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Closed</para>
        /// </summary>
        public bool IsClosed
        {
            get
            {
                return this is Closed;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Closed, or <c>null</c>.</para>
        /// </summary>
        public Closed AsClosed
        {
            get
            {
                return this as Closed;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region IEncodable<UploadSessionLookupError> methods

        /// <summary>
        /// <para>Encodes the object using the supplied encoder.</para>
        /// </summary>
        /// <param name="encoder">The encoder being used to serialize the object.</param>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        void enc.IEncodable<UploadSessionLookupError>.Encode(enc.IEncoder encoder)
        {
            if (this.IsNotFound)
            {
                ((enc.IEncodable<NotFound>)this).Encode(encoder);
            }
            else if (this.IsIncorrectOffset)
            {
                ((enc.IEncodable<IncorrectOffset>)this).Encode(encoder);
            }
            else if (this.IsClosed)
            {
                ((enc.IEncodable<Closed>)this).Encode(encoder);
            }
            else
            {
                ((enc.IEncodable<Other>)this).Encode(encoder);
            }
        }

        /// <summary>
        /// <para>Decodes on object using the supplied decoder.</para>
        /// </summary>
        /// <param name="decoder">The decoder used to deserialize the object.</param>
        /// <returns>The deserialized object. Note: this is not necessarily the current
        /// instance.</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        UploadSessionLookupError enc.IEncodable<UploadSessionLookupError>.Decode(enc.IDecoder decoder)
        {
            switch (decoder.GetUnionName())
            {
            case "not_found":
                return NotFound.Instance;
            case "incorrect_offset":
                using (var obj = decoder.GetObject())
                {
                    return new IncorrectOffset(obj.GetFieldObject<UploadSessionOffsetError>("incorrect_offset"));
                }
            case "closed":
                return Closed.Instance;
            default:
                return Other.Instance;
            }
        }

        #endregion

        /// <summary>
        /// <para>The upload session id was not found.</para>
        /// </summary>
        public sealed class NotFound : UploadSessionLookupError, enc.IEncodable<NotFound>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="NotFound" /> class.</para>
            /// </summary>
            private NotFound()
            {
            }

            /// <summary>
            /// <para>A singleton instance of NotFound</para>
            /// </summary>
            public static readonly NotFound Instance = new NotFound();

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            void enc.IEncodable<NotFound>.Encode(enc.IEncoder encoder)
            {
                using (var obj = encoder.AddObject())
                {
                    obj.AddField(".tag", "not_found");
                }
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            NotFound enc.IEncodable<NotFound>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }

        /// <summary>
        /// <para>The specified offset was incorrect. See the value for the correct offset.
        /// (This error may occur when a previous request was received and processed
        /// successfully but the client did not receive the response, e.g. due to a network
        /// error.)</para>
        /// </summary>
        public sealed class IncorrectOffset : UploadSessionLookupError, enc.IEncodable<IncorrectOffset>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="IncorrectOffset" />
            /// class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public IncorrectOffset(UploadSessionOffsetError value)
            {
                this.Value = value;
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public UploadSessionOffsetError Value { get; private set; }

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            void enc.IEncodable<IncorrectOffset>.Encode(enc.IEncoder encoder)
            {
                using (var obj = encoder.AddObject())
                {
                    obj.AddField(".tag", "incorrect_offset");
                    obj.AddField("incorrect_offset", this.Value);
                }
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            IncorrectOffset enc.IEncodable<IncorrectOffset>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }

        /// <summary>
        /// <para>You are attempting to append data to an upload session that has alread been
        /// closed (i.e. committed).</para>
        /// </summary>
        public sealed class Closed : UploadSessionLookupError, enc.IEncodable<Closed>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Closed" /> class.</para>
            /// </summary>
            private Closed()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Closed</para>
            /// </summary>
            public static readonly Closed Instance = new Closed();

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            void enc.IEncodable<Closed>.Encode(enc.IEncoder encoder)
            {
                using (var obj = encoder.AddObject())
                {
                    obj.AddField(".tag", "closed");
                }
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            Closed enc.IEncodable<Closed>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }

        /// <summary>
        /// <para>An unspecified error.</para>
        /// </summary>
        public sealed class Other : UploadSessionLookupError, enc.IEncodable<Other>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            void enc.IEncodable<Other>.Encode(enc.IEncoder encoder)
            {
                using (var obj = encoder.AddObject())
                {
                    obj.AddField(".tag", "other");
                }
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            Other enc.IEncodable<Other>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }
    }
}

// <auto-generated>
// Auto-generated by BabelAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Sharing
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Babel;

    /// <summary>
    /// <para>The information about a user.</para>
    /// </summary>
    /// <seealso cref="UserMembershipInfo" />
    public sealed class UserInfo : enc.IEncodable<UserInfo>
    {
        /// <summary>
        /// <para>Initializes a new instance of the <see cref="UserInfo" /> class.</para>
        /// </summary>
        /// <param name="accountId">The account ID of the user.</param>
        /// <param name="displayName">The display name of the user.</param>
        /// <param name="sameTeam">If the user is in the same team as current user.</param>
        /// <param name="memberId">The member id of the user for the shared folder. This field
        /// will only present if same_team field is true.</param>
        public UserInfo(string accountId,
                        string displayName,
                        bool sameTeam,
                        string memberId = null)
        {
            if (accountId == null)
            {
                throw new sys.ArgumentNullException("accountId");
            }
            else if (accountId.Length < 40 || accountId.Length > 40)
            {
                throw new sys.ArgumentOutOfRangeException("accountId");
            }

            if (displayName == null)
            {
                throw new sys.ArgumentNullException("displayName");
            }

            this.AccountId = accountId;
            this.DisplayName = displayName;
            this.SameTeam = sameTeam;
            this.MemberId = memberId;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="UserInfo" /> class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        public UserInfo()
        {
        }

        /// <summary>
        /// <para>The account ID of the user.</para>
        /// </summary>
        public string AccountId { get; private set; }

        /// <summary>
        /// <para>The display name of the user.</para>
        /// </summary>
        public string DisplayName { get; private set; }

        /// <summary>
        /// <para>If the user is in the same team as current user.</para>
        /// </summary>
        public bool SameTeam { get; private set; }

        /// <summary>
        /// <para>The member id of the user for the shared folder. This field will only present
        /// if same_team field is true.</para>
        /// </summary>
        public string MemberId { get; private set; }

        #region IEncodable<UserInfo> methods

        /// <summary>
        /// <para>Encodes the object using the supplied encoder.</para>
        /// </summary>
        /// <param name="encoder">The encoder being used to serialize the object.</param>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        void enc.IEncodable<UserInfo>.Encode(enc.IEncoder encoder)
        {
            using (var obj = encoder.AddObject())
            {
                obj.AddField<string>("account_id", this.AccountId);
                obj.AddField<string>("display_name", this.DisplayName);
                obj.AddField<bool>("same_team", this.SameTeam);
                if (this.MemberId != null)
                {
                    obj.AddField<string>("member_id", this.MemberId);
                }
            }
        }

        /// <summary>
        /// <para>Decodes on object using the supplied decoder.</para>
        /// </summary>
        /// <param name="decoder">The decoder used to deserialize the object.</param>
        /// <returns>The deserialized object. Note: this is not necessarily the current
        /// instance.</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        UserInfo enc.IEncodable<UserInfo>.Decode(enc.IDecoder decoder)
        {
            using (var obj = decoder.GetObject())
            {
                this.AccountId = obj.GetField<string>("account_id");
                this.DisplayName = obj.GetField<string>("display_name");
                this.SameTeam = obj.GetField<bool>("same_team");
                if (obj.HasField("member_id"))
                {
                    this.MemberId = obj.GetField<string>("member_id");
                }
            }

            return this;
        }

        #endregion
    }
}

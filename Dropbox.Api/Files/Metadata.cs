// <auto-generated>
// Auto-generated by BabelAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Babel;

    /// <summary>
    /// <para>Metadata for a file or folder.</para>
    /// </summary>
    /// <seealso cref="DeletedMetadata" />
    /// <seealso cref="FileMetadata" />
    /// <seealso cref="FolderMetadata" />
    /// <seealso cref="SearchMatch" />
    public class Metadata : enc.IEncodable<Metadata>
    {
        /// <summary>
        /// <para>Initializes a new instance of the <see cref="Metadata" /> class.</para>
        /// </summary>
        /// <param name="name">The last component of the path (including extension). This never
        /// contains a slash.</param>
        /// <param name="pathLower">The lowercased full path in the user's Dropbox. This always
        /// starts with a slash.</param>
        protected Metadata(string name,
                           string pathLower)
        {
            if (name == null)
            {
                throw new sys.ArgumentNullException("name");
            }

            if (pathLower == null)
            {
                throw new sys.ArgumentNullException("pathLower");
            }

            this.Name = name;
            this.PathLower = pathLower;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="Metadata" /> class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        public Metadata()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is File</para>
        /// </summary>
        public bool IsFile
        {
            get
            {
                return this is FileMetadata;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a <see cref="FileMetadata" />, or <c>null</c>.</para>
        /// </summary>
        public FileMetadata AsFile
        {
            get
            {
                return this as FileMetadata;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Folder</para>
        /// </summary>
        public bool IsFolder
        {
            get
            {
                return this is FolderMetadata;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a <see cref="FolderMetadata" />, or <c>null</c>.</para>
        /// </summary>
        public FolderMetadata AsFolder
        {
            get
            {
                return this as FolderMetadata;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Deleted</para>
        /// </summary>
        public bool IsDeleted
        {
            get
            {
                return this is DeletedMetadata;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a <see cref="DeletedMetadata" />, or
        /// <c>null</c>.</para>
        /// </summary>
        public DeletedMetadata AsDeleted
        {
            get
            {
                return this as DeletedMetadata;
            }
        }

        /// <summary>
        /// <para>The last component of the path (including extension). This never contains a
        /// slash.</para>
        /// </summary>
        public string Name { get; protected set; }

        /// <summary>
        /// <para>The lowercased full path in the user's Dropbox. This always starts with a
        /// slash.</para>
        /// </summary>
        public string PathLower { get; protected set; }

        #region IEncodable<Metadata> methods

        /// <summary>
        /// <para>Encodes the object using the supplied encoder.</para>
        /// </summary>
        /// <param name="encoder">The encoder being used to serialize the object.</param>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        void enc.IEncodable<Metadata>.Encode(enc.IEncoder encoder)
        {
            if (this.IsFile)
            {
                ((enc.IEncodable<FileMetadata>)this.AsFile).Encode(encoder);
            }
            else if (this.IsFolder)
            {
                ((enc.IEncodable<FolderMetadata>)this.AsFolder).Encode(encoder);
            }
            else if (this.IsDeleted)
            {
                ((enc.IEncodable<DeletedMetadata>)this.AsDeleted).Encode(encoder);
            }
            else
            {
                throw new sys.InvalidOperationException();
            }
        }

        /// <summary>
        /// <para>Decodes on object using the supplied decoder.</para>
        /// </summary>
        /// <param name="decoder">The decoder used to deserialize the object.</param>
        /// <returns>The deserialized object. Note: this is not necessarily the current
        /// instance.</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        Metadata enc.IEncodable<Metadata>.Decode(enc.IDecoder decoder)
        {
            var tag = string.Empty;
            using (var obj = decoder.GetObject())
            {
                tag = obj.GetField<string>(".tag");
            }

            switch (tag)
            {
            case "file":
                var file = new FileMetadata();
                return ((enc.IEncodable<FileMetadata>)file).Decode(decoder);
            case "folder":
                var folder = new FolderMetadata();
                return ((enc.IEncodable<FolderMetadata>)folder).Decode(decoder);
            case "deleted":
                var deleted = new DeletedMetadata();
                return ((enc.IEncodable<DeletedMetadata>)deleted).Decode(decoder);
            default:
                throw new sys.InvalidOperationException();
            }
        }

        #endregion
    }
}

// <auto-generated>
// Auto-generated by BabelAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Sharing
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Babel;

    /// <summary>
    /// <para>Who can access a shared link. The most open visibility is <see cref="Public" />.
    /// The default depends on many aspects, such as team and user preferences and shared
    /// folder settings.</para>
    /// </summary>
    public class Visibility : enc.IEncodable<Visibility>
    {
        /// <summary>
        /// <para>Initializes a new instance of the <see cref="Visibility" /> class.</para>
        /// </summary>
        public Visibility()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Public</para>
        /// </summary>
        public bool IsPublic
        {
            get
            {
                return this is Public;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Public, or <c>null</c>.</para>
        /// </summary>
        public Public AsPublic
        {
            get
            {
                return this as Public;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is TeamOnly</para>
        /// </summary>
        public bool IsTeamOnly
        {
            get
            {
                return this is TeamOnly;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TeamOnly, or <c>null</c>.</para>
        /// </summary>
        public TeamOnly AsTeamOnly
        {
            get
            {
                return this as TeamOnly;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Password</para>
        /// </summary>
        public bool IsPassword
        {
            get
            {
                return this is Password;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Password, or <c>null</c>.</para>
        /// </summary>
        public Password AsPassword
        {
            get
            {
                return this as Password;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is TeamAndPassword</para>
        /// </summary>
        public bool IsTeamAndPassword
        {
            get
            {
                return this is TeamAndPassword;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TeamAndPassword, or <c>null</c>.</para>
        /// </summary>
        public TeamAndPassword AsTeamAndPassword
        {
            get
            {
                return this as TeamAndPassword;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is SharedFolderOnly</para>
        /// </summary>
        public bool IsSharedFolderOnly
        {
            get
            {
                return this is SharedFolderOnly;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a SharedFolderOnly, or <c>null</c>.</para>
        /// </summary>
        public SharedFolderOnly AsSharedFolderOnly
        {
            get
            {
                return this as SharedFolderOnly;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region IEncodable<Visibility> methods

        /// <summary>
        /// <para>Encodes the object using the supplied encoder.</para>
        /// </summary>
        /// <param name="encoder">The encoder being used to serialize the object.</param>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        void enc.IEncodable<Visibility>.Encode(enc.IEncoder encoder)
        {
            if (this.IsPublic)
            {
                ((enc.IEncodable<Public>)this).Encode(encoder);
            }
            else if (this.IsTeamOnly)
            {
                ((enc.IEncodable<TeamOnly>)this).Encode(encoder);
            }
            else if (this.IsPassword)
            {
                ((enc.IEncodable<Password>)this).Encode(encoder);
            }
            else if (this.IsTeamAndPassword)
            {
                ((enc.IEncodable<TeamAndPassword>)this).Encode(encoder);
            }
            else if (this.IsSharedFolderOnly)
            {
                ((enc.IEncodable<SharedFolderOnly>)this).Encode(encoder);
            }
            else
            {
                ((enc.IEncodable<Other>)this).Encode(encoder);
            }
        }

        /// <summary>
        /// <para>Decodes on object using the supplied decoder.</para>
        /// </summary>
        /// <param name="decoder">The decoder used to deserialize the object.</param>
        /// <returns>The deserialized object. Note: this is not necessarily the current
        /// instance.</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        Visibility enc.IEncodable<Visibility>.Decode(enc.IDecoder decoder)
        {
            switch (decoder.GetUnionName())
            {
            case "public":
                return Public.Instance;
            case "team_only":
                return TeamOnly.Instance;
            case "password":
                return Password.Instance;
            case "team_and_password":
                return TeamAndPassword.Instance;
            case "shared_folder_only":
                return SharedFolderOnly.Instance;
            default:
                return Other.Instance;
            }
        }

        #endregion

        /// <summary>
        /// <para>Anyone who has received the link can access it. No login required.</para>
        /// </summary>
        public sealed class Public : Visibility, enc.IEncodable<Public>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Public" /> class.</para>
            /// </summary>
            private Public()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Public</para>
            /// </summary>
            public static readonly Public Instance = new Public();

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            void enc.IEncodable<Public>.Encode(enc.IEncoder encoder)
            {
                using (var obj = encoder.AddObject())
                {
                    obj.AddField(".tag", "public");
                }
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            Public enc.IEncodable<Public>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }

        /// <summary>
        /// <para>Only members of the same DfB (Dropbox for Business) team can access the link.
        /// Login is required.</para>
        /// </summary>
        public sealed class TeamOnly : Visibility, enc.IEncodable<TeamOnly>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TeamOnly" /> class.</para>
            /// </summary>
            private TeamOnly()
            {
            }

            /// <summary>
            /// <para>A singleton instance of TeamOnly</para>
            /// </summary>
            public static readonly TeamOnly Instance = new TeamOnly();

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            void enc.IEncodable<TeamOnly>.Encode(enc.IEncoder encoder)
            {
                using (var obj = encoder.AddObject())
                {
                    obj.AddField(".tag", "team_only");
                }
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            TeamOnly enc.IEncodable<TeamOnly>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }

        /// <summary>
        /// <para>A link-specific password is required to access the link. Login is not
        /// required.</para>
        /// </summary>
        public sealed class Password : Visibility, enc.IEncodable<Password>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Password" /> class.</para>
            /// </summary>
            private Password()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Password</para>
            /// </summary>
            public static readonly Password Instance = new Password();

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            void enc.IEncodable<Password>.Encode(enc.IEncoder encoder)
            {
                using (var obj = encoder.AddObject())
                {
                    obj.AddField(".tag", "password");
                }
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            Password enc.IEncodable<Password>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }

        /// <summary>
        /// <para>Only members of the same DfB (Dropbox for Business) team who have the
        /// link-specific password can access the link.</para>
        /// </summary>
        public sealed class TeamAndPassword : Visibility, enc.IEncodable<TeamAndPassword>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TeamAndPassword" />
            /// class.</para>
            /// </summary>
            private TeamAndPassword()
            {
            }

            /// <summary>
            /// <para>A singleton instance of TeamAndPassword</para>
            /// </summary>
            public static readonly TeamAndPassword Instance = new TeamAndPassword();

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            void enc.IEncodable<TeamAndPassword>.Encode(enc.IEncoder encoder)
            {
                using (var obj = encoder.AddObject())
                {
                    obj.AddField(".tag", "team_and_password");
                }
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            TeamAndPassword enc.IEncodable<TeamAndPassword>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }

        /// <summary>
        /// <para>Only members of the shared folder containing the linked file can access the
        /// link. Login is required.</para>
        /// </summary>
        public sealed class SharedFolderOnly : Visibility, enc.IEncodable<SharedFolderOnly>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="SharedFolderOnly" />
            /// class.</para>
            /// </summary>
            private SharedFolderOnly()
            {
            }

            /// <summary>
            /// <para>A singleton instance of SharedFolderOnly</para>
            /// </summary>
            public static readonly SharedFolderOnly Instance = new SharedFolderOnly();

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            void enc.IEncodable<SharedFolderOnly>.Encode(enc.IEncoder encoder)
            {
                using (var obj = encoder.AddObject())
                {
                    obj.AddField(".tag", "shared_folder_only");
                }
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            SharedFolderOnly enc.IEncodable<SharedFolderOnly>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }

        /// <summary>
        /// <para>An unknown restriction is in place.</para>
        /// </summary>
        public sealed class Other : Visibility, enc.IEncodable<Other>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            void enc.IEncodable<Other>.Encode(enc.IEncoder encoder)
            {
                using (var obj = encoder.AddObject())
                {
                    obj.AddField(".tag", "other");
                }
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            Other enc.IEncodable<Other>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }
    }
}

// <auto-generated>
// Auto-generated by BabelAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Sharing
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Babel;

    /// <summary>
    /// <para>Metadata for a shared link. This can be either a <see cref="PathLinkMetadata" />
    /// or <see cref="CollectionLinkMetadata" />.</para>
    /// </summary>
    /// <seealso cref="CollectionLinkMetadata" />
    /// <seealso cref="PathLinkMetadata" />
    public class LinkMetadata : enc.IEncodable<LinkMetadata>
    {
        /// <summary>
        /// <para>Initializes a new instance of the <see cref="LinkMetadata" /> class.</para>
        /// </summary>
        /// <param name="url">URL of the shared link.</param>
        /// <param name="visibility">Who can access the link.</param>
        /// <param name="expires">Expiration time, if set. By default the link won't
        /// expire.</param>
        protected LinkMetadata(string url,
                               Visibility visibility,
                               sys.DateTime? expires = null)
        {
            if (url == null)
            {
                throw new sys.ArgumentNullException("url");
            }

            if (visibility == null)
            {
                throw new sys.ArgumentNullException("visibility");
            }

            this.Url = url;
            this.Visibility = visibility;
            this.Expires = expires;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="LinkMetadata" /> class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        public LinkMetadata()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Path</para>
        /// </summary>
        public bool IsPath
        {
            get
            {
                return this is PathLinkMetadata;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a <see cref="PathLinkMetadata" />, or
        /// <c>null</c>.</para>
        /// </summary>
        public PathLinkMetadata AsPath
        {
            get
            {
                return this as PathLinkMetadata;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Collection</para>
        /// </summary>
        public bool IsCollection
        {
            get
            {
                return this is CollectionLinkMetadata;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a <see cref="CollectionLinkMetadata" />, or
        /// <c>null</c>.</para>
        /// </summary>
        public CollectionLinkMetadata AsCollection
        {
            get
            {
                return this as CollectionLinkMetadata;
            }
        }

        /// <summary>
        /// <para>URL of the shared link.</para>
        /// </summary>
        public string Url { get; protected set; }

        /// <summary>
        /// <para>Who can access the link.</para>
        /// </summary>
        public Visibility Visibility { get; protected set; }

        /// <summary>
        /// <para>Expiration time, if set. By default the link won't expire.</para>
        /// </summary>
        public sys.DateTime? Expires { get; protected set; }

        #region IEncodable<LinkMetadata> methods

        /// <summary>
        /// <para>Encodes the object using the supplied encoder.</para>
        /// </summary>
        /// <param name="encoder">The encoder being used to serialize the object.</param>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        void enc.IEncodable<LinkMetadata>.Encode(enc.IEncoder encoder)
        {
            if (this.IsPath)
            {
                ((enc.IEncodable<PathLinkMetadata>)this.AsPath).Encode(encoder);
            }
            else if (this.IsCollection)
            {
                ((enc.IEncodable<CollectionLinkMetadata>)this.AsCollection).Encode(encoder);
            }
            else
            {
                using (var obj = encoder.AddObject())
                {
                    obj.AddField<string>(".tag", "");
                    obj.AddField<string>("url", this.Url);
                    obj.AddFieldObject<Visibility>("visibility", this.Visibility);
                    if (this.Expires != null)
                    {
                        obj.AddField<sys.DateTime>("expires", this.Expires.Value);
                    }
                }
            }
        }

        /// <summary>
        /// <para>Decodes on object using the supplied decoder.</para>
        /// </summary>
        /// <param name="decoder">The decoder used to deserialize the object.</param>
        /// <returns>The deserialized object. Note: this is not necessarily the current
        /// instance.</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        LinkMetadata enc.IEncodable<LinkMetadata>.Decode(enc.IDecoder decoder)
        {
            var tag = string.Empty;
            using (var obj = decoder.GetObject())
            {
                tag = obj.GetField<string>(".tag");
            }

            switch (tag)
            {
            case "path":
                var path = new PathLinkMetadata();
                return ((enc.IEncodable<PathLinkMetadata>)path).Decode(decoder);
            case "collection":
                var collection = new CollectionLinkMetadata();
                return ((enc.IEncodable<CollectionLinkMetadata>)collection).Decode(decoder);
            default:
                using (var obj = decoder.GetObject())
                {
                    this.Url = obj.GetField<string>("url");
                    this.Visibility = obj.GetFieldObject<Visibility>("visibility");
                    if (obj.HasField("expires"))
                    {
                        this.Expires = obj.GetField<sys.DateTime>("expires");
                    }
                }

                return this;
            }
        }

        #endregion
    }
}

// <auto-generated>
// Auto-generated by BabelAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Sharing
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Babel;

    /// <summary>
    /// <para>Result for <see cref="Dropbox.Api.Sharing.Routes.SharingRoutes.ListFoldersAsync"
    /// />.</para>
    /// <para>Unmounted shared folders can be identified by the absence of <see
    /// cref="SharedFolderMetadata.PathLower" />.</para>
    /// </summary>
    public class ListFoldersResult
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<ListFoldersResult> Encoder = new ListFoldersResultEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<ListFoldersResult> Decoder = new ListFoldersResultDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="ListFoldersResult" />
        /// class.</para>
        /// </summary>
        /// <param name="entries">List of all shared folders the authenticated user has access
        /// to.</param>
        public ListFoldersResult(col.IEnumerable<SharedFolderMetadata> entries)
        {
            var entriesList = new col.List<SharedFolderMetadata>(entries ?? new SharedFolderMetadata[0]);

            if (entries == null)
            {
                throw new sys.ArgumentNullException("entries");
            }

            this.Entries = entriesList;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="ListFoldersResult" />
        /// class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        public ListFoldersResult()
        {
        }

        /// <summary>
        /// <para>List of all shared folders the authenticated user has access to.</para>
        /// </summary>
        public col.IList<SharedFolderMetadata> Entries { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="ListFoldersResult" />.</para>
        /// </summary>
        private class ListFoldersResultEncoder : enc.StructEncoder<ListFoldersResult>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(ListFoldersResult value, enc.IJsonWriter writer)
            {
                WriteListProperty("entries", value.Entries, writer, SharedFolderMetadata.Encoder);
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="ListFoldersResult" />.</para>
        /// </summary>
        private class ListFoldersResultDecoder : enc.StructDecoder<ListFoldersResult>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="ListFoldersResult" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override ListFoldersResult Create()
            {
                return new ListFoldersResult();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(ListFoldersResult value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "entries":
                        value.Entries = ReadList(reader, SharedFolderMetadata.Decoder);
                        break;
                    default:
                        SkipProperty(reader);
                        break;
                }
            }
        }

        #endregion
    }
}

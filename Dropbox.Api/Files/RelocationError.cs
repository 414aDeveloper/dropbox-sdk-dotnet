// <auto-generated>
// Auto-generated by BabelAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Babel;

    /// <summary>
    /// <para>Errors reported by <see cref="Dropbox.Api.Files.Routes.FilesRoutes.CopyAsync" />
    /// and <see cref="Dropbox.Api.Files.Routes.FilesRoutes.MoveAsync" />.</para>
    /// <para>This is not just an extension of PathError; there are alternatives for errors
    /// relating to the source, the destination, and the copy operation itself.</para>
    /// </summary>
    public class RelocationError : enc.IEncodable<RelocationError>
    {
        /// <summary>
        /// <para>Initializes a new instance of the <see cref="RelocationError" />
        /// class.</para>
        /// </summary>
        public RelocationError()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is FromError</para>
        /// </summary>
        public bool IsFromError
        {
            get
            {
                return this is FromError;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a FromError, or <c>null</c>.</para>
        /// </summary>
        public FromError AsFromError
        {
            get
            {
                return this as FromError;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is ToError</para>
        /// </summary>
        public bool IsToError
        {
            get
            {
                return this is ToError;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a ToError, or <c>null</c>.</para>
        /// </summary>
        public ToError AsToError
        {
            get
            {
                return this as ToError;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is TooManyFiles</para>
        /// </summary>
        public bool IsTooManyFiles
        {
            get
            {
                return this is TooManyFiles;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TooManyFiles, or <c>null</c>.</para>
        /// </summary>
        public TooManyFiles AsTooManyFiles
        {
            get
            {
                return this as TooManyFiles;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is QuotaError</para>
        /// </summary>
        public bool IsQuotaError
        {
            get
            {
                return this is QuotaError;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a QuotaError, or <c>null</c>.</para>
        /// </summary>
        public QuotaError AsQuotaError
        {
            get
            {
                return this as QuotaError;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region IEncodable<RelocationError> methods

        /// <summary>
        /// <para>Encodes the object using the supplied encoder.</para>
        /// </summary>
        /// <param name="encoder">The encoder being used to serialize the object.</param>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        void enc.IEncodable<RelocationError>.Encode(enc.IEncoder encoder)
        {
            if (this.IsFromError)
            {
                ((enc.IEncodable<FromError>)this).Encode(encoder);
            }
            else if (this.IsToError)
            {
                ((enc.IEncodable<ToError>)this).Encode(encoder);
            }
            else if (this.IsTooManyFiles)
            {
                ((enc.IEncodable<TooManyFiles>)this).Encode(encoder);
            }
            else if (this.IsQuotaError)
            {
                ((enc.IEncodable<QuotaError>)this).Encode(encoder);
            }
            else
            {
                ((enc.IEncodable<Other>)this).Encode(encoder);
            }
        }

        /// <summary>
        /// <para>Decodes on object using the supplied decoder.</para>
        /// </summary>
        /// <param name="decoder">The decoder used to deserialize the object.</param>
        /// <returns>The deserialized object. Note: this is not necessarily the current
        /// instance.</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        RelocationError enc.IEncodable<RelocationError>.Decode(enc.IDecoder decoder)
        {
            switch (decoder.GetUnionName())
            {
            case "from_error":
                using (var obj = decoder.GetObject())
                {
                    return new FromError(obj.GetFieldObject<PathError>("from_error"));
                }
            case "to_error":
                using (var obj = decoder.GetObject())
                {
                    return new ToError(obj.GetFieldObject<PathError>("to_error"));
                }
            case "too_many_files":
                return TooManyFiles.Instance;
            case "quota_error":
                return QuotaError.Instance;
            default:
                return Other.Instance;
            }
        }

        #endregion

        /// <summary>
        /// <para>The operation is disallowed due to a problem with the source path.</para>
        /// </summary>
        public sealed class FromError : RelocationError, enc.IEncodable<FromError>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="FromError" /> class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public FromError(PathError value)
            {
                this.Value = value;
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public PathError Value { get; private set; }

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            void enc.IEncodable<FromError>.Encode(enc.IEncoder encoder)
            {
                using (var obj = encoder.AddObject())
                {
                    obj.AddField("from_error", this.Value);
                }
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            FromError enc.IEncodable<FromError>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }

        /// <summary>
        /// <para>The operation is disallowed due to a problem with the destination
        /// path.</para>
        /// </summary>
        public sealed class ToError : RelocationError, enc.IEncodable<ToError>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="ToError" /> class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public ToError(PathError value)
            {
                this.Value = value;
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public PathError Value { get; private set; }

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            void enc.IEncodable<ToError>.Encode(enc.IEncoder encoder)
            {
                using (var obj = encoder.AddObject())
                {
                    obj.AddField("to_error", this.Value);
                }
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            ToError enc.IEncodable<ToError>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }

        /// <summary>
        /// <para>The operation would involve more than 10,000 files and folders.</para>
        /// </summary>
        public sealed class TooManyFiles : RelocationError, enc.IEncodable<TooManyFiles>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TooManyFiles" />
            /// class.</para>
            /// </summary>
            private TooManyFiles()
            {
            }

            /// <summary>
            /// <para>A singleton instance of TooManyFiles</para>
            /// </summary>
            public static readonly TooManyFiles Instance = new TooManyFiles();

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            void enc.IEncodable<TooManyFiles>.Encode(enc.IEncoder encoder)
            {
                encoder.AddUnion("too_many_files");
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            TooManyFiles enc.IEncodable<TooManyFiles>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }

        /// <summary>
        /// <para>Quota exceeded.</para>
        /// </summary>
        public sealed class QuotaError : RelocationError, enc.IEncodable<QuotaError>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="QuotaError" /> class.</para>
            /// </summary>
            private QuotaError()
            {
            }

            /// <summary>
            /// <para>A singleton instance of QuotaError</para>
            /// </summary>
            public static readonly QuotaError Instance = new QuotaError();

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            void enc.IEncodable<QuotaError>.Encode(enc.IEncoder encoder)
            {
                encoder.AddUnion("quota_error");
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            QuotaError enc.IEncodable<QuotaError>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }

        /// <summary>
        /// <para>An unspecified error.</para>
        /// </summary>
        public sealed class Other : RelocationError, enc.IEncodable<Other>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            void enc.IEncodable<Other>.Encode(enc.IEncoder encoder)
            {
                encoder.AddUnion("other");
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            Other enc.IEncodable<Other>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }
    }
}

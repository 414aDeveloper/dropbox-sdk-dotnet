// <auto-generated>
// Auto-generated by BabelAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Sharing
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Babel;

    /// <summary>
    /// <para>The metadata which includes basic information about the shared folder.</para>
    /// </summary>
    /// <seealso cref="SharedFolderMetadata" />
    public class BasicSharedFolderMetadata : SharedFolderMetadata
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<BasicSharedFolderMetadata> Encoder = new BasicSharedFolderMetadataEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<BasicSharedFolderMetadata> Decoder = new BasicSharedFolderMetadataDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="BasicSharedFolderMetadata" />
        /// class.</para>
        /// </summary>
        /// <param name="name">The name of the this shared folder.</param>
        /// <param name="id">The ID of the shared folder.</param>
        /// <param name="accessType">The current user's access level for this shared
        /// folder.</param>
        /// <param name="isTeamFolder">Whether this folder is a <a
        /// href="https://www.dropbox.com/en/help/986">team folder</a>.</param>
        /// <param name="policy">Policies governing this shared folder.</param>
        /// <param name="pathLower">The lower-cased full path of this shared folder. Absent for
        /// unmounted folders.</param>
        public BasicSharedFolderMetadata(string name,
                                         string id,
                                         AccessLevel accessType,
                                         bool isTeamFolder,
                                         FolderPolicy policy,
                                         string pathLower = null)
            : base(name, id, accessType, isTeamFolder, policy, pathLower)
        {
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="BasicSharedFolderMetadata" />
        /// class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        public BasicSharedFolderMetadata()
        {
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="BasicSharedFolderMetadata" />.</para>
        /// </summary>
        private class BasicSharedFolderMetadataEncoder : enc.StructEncoder<BasicSharedFolderMetadata>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(BasicSharedFolderMetadata value, enc.IJsonWriter writer)
            {
                WriteProperty("name", value.Name, writer, enc.StringEncoder.Instance);
                WriteProperty("id", value.Id, writer, enc.StringEncoder.Instance);
                WriteProperty("access_type", value.AccessType, writer, AccessLevel.Encoder);
                WriteProperty("is_team_folder", value.IsTeamFolder, writer, enc.BooleanEncoder.Instance);
                WriteProperty("policy", value.Policy, writer, FolderPolicy.Encoder);
                if (value.PathLower != null)
                {
                    WriteProperty("path_lower", value.PathLower, writer, enc.StringEncoder.Instance);
                }
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="BasicSharedFolderMetadata" />.</para>
        /// </summary>
        private class BasicSharedFolderMetadataDecoder : enc.StructDecoder<BasicSharedFolderMetadata>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="BasicSharedFolderMetadata"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override BasicSharedFolderMetadata Create()
            {
                return new BasicSharedFolderMetadata();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(BasicSharedFolderMetadata value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "name":
                        value.Name = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "id":
                        value.Id = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "access_type":
                        value.AccessType = AccessLevel.Decoder.Decode(reader);
                        break;
                    case "is_team_folder":
                        value.IsTeamFolder = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    case "policy":
                        value.Policy = FolderPolicy.Decoder.Decode(reader);
                        break;
                    case "path_lower":
                        value.PathLower = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}

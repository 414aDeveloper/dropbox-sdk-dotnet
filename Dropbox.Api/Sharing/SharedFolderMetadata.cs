// <auto-generated>
// Auto-generated by BabelAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Sharing
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Babel;

    /// <summary>
    /// <para>The base type for shared folder metadata.</para>
    /// </summary>
    /// <seealso cref="BasicSharedFolderMetadata" />
    /// <seealso cref="FullSharedFolderMetadata" />
    public class SharedFolderMetadata
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<SharedFolderMetadata> Encoder = new SharedFolderMetadataEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<SharedFolderMetadata> Decoder = new SharedFolderMetadataDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="SharedFolderMetadata" />
        /// class.</para>
        /// </summary>
        /// <param name="name">The name of the this shared folder.</param>
        /// <param name="id">The ID of the shared folder.</param>
        /// <param name="accessType">The current user's access level for this shared
        /// folder.</param>
        /// <param name="isTeamFolder">Whether this folder is a <a
        /// href="https://www.dropbox.com/en/help/986">team folder</a>.</param>
        /// <param name="policy">Policies governing this shared folder.</param>
        /// <param name="pathLower">The lower-cased full path of this shared folder. Absent for
        /// unmounted folders.</param>
        protected SharedFolderMetadata(string name,
                                       string id,
                                       AccessLevel accessType,
                                       bool isTeamFolder,
                                       FolderPolicy policy,
                                       string pathLower = null)
        {
            if (name == null)
            {
                throw new sys.ArgumentNullException("name");
            }

            if (id == null)
            {
                throw new sys.ArgumentNullException("id");
            }
            else if (!re.Regex.IsMatch(id, @"[-_0-9a-zA-Z]+"))
            {
                throw new sys.ArgumentOutOfRangeException("id");
            }

            if (accessType == null)
            {
                throw new sys.ArgumentNullException("accessType");
            }

            if (policy == null)
            {
                throw new sys.ArgumentNullException("policy");
            }

            this.Name = name;
            this.Id = id;
            this.AccessType = accessType;
            this.IsTeamFolder = isTeamFolder;
            this.Policy = policy;
            this.PathLower = pathLower;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="SharedFolderMetadata" />
        /// class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        public SharedFolderMetadata()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Basic</para>
        /// </summary>
        public bool IsBasic
        {
            get
            {
                return this is BasicSharedFolderMetadata;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a <see cref="BasicSharedFolderMetadata" />, or
        /// <c>null</c>.</para>
        /// </summary>
        public BasicSharedFolderMetadata AsBasic
        {
            get
            {
                return this as BasicSharedFolderMetadata;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Full</para>
        /// </summary>
        public bool IsFull
        {
            get
            {
                return this is FullSharedFolderMetadata;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a <see cref="FullSharedFolderMetadata" />, or
        /// <c>null</c>.</para>
        /// </summary>
        public FullSharedFolderMetadata AsFull
        {
            get
            {
                return this as FullSharedFolderMetadata;
            }
        }

        /// <summary>
        /// <para>The name of the this shared folder.</para>
        /// </summary>
        public string Name { get; protected set; }

        /// <summary>
        /// <para>The ID of the shared folder.</para>
        /// </summary>
        public string Id { get; protected set; }

        /// <summary>
        /// <para>The current user's access level for this shared folder.</para>
        /// </summary>
        public AccessLevel AccessType { get; protected set; }

        /// <summary>
        /// <para>Whether this folder is a <a href="https://www.dropbox.com/en/help/986">team
        /// folder</a>.</para>
        /// </summary>
        public bool IsTeamFolder { get; protected set; }

        /// <summary>
        /// <para>Policies governing this shared folder.</para>
        /// </summary>
        public FolderPolicy Policy { get; protected set; }

        /// <summary>
        /// <para>The lower-cased full path of this shared folder. Absent for unmounted
        /// folders.</para>
        /// </summary>
        public string PathLower { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="SharedFolderMetadata" />.</para>
        /// </summary>
        private class SharedFolderMetadataEncoder : enc.StructEncoder<SharedFolderMetadata>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(SharedFolderMetadata value, enc.IJsonWriter writer)
            {
                if (value is BasicSharedFolderMetadata)
                {
                    WriteProperty(".tag", "basic", writer, enc.StringEncoder.Instance);
                    BasicSharedFolderMetadata.Encoder.EncodeFields((BasicSharedFolderMetadata)value, writer);
                    return;
                }
                if (value is FullSharedFolderMetadata)
                {
                    WriteProperty(".tag", "full", writer, enc.StringEncoder.Instance);
                    FullSharedFolderMetadata.Encoder.EncodeFields((FullSharedFolderMetadata)value, writer);
                    return;
                }
                WriteProperty("name", value.Name, writer, enc.StringEncoder.Instance);
                WriteProperty("id", value.Id, writer, enc.StringEncoder.Instance);
                WriteProperty("access_type", value.AccessType, writer, AccessLevel.Encoder);
                WriteProperty("is_team_folder", value.IsTeamFolder, writer, enc.BooleanEncoder.Instance);
                WriteProperty("policy", value.Policy, writer, FolderPolicy.Encoder);
                if (value.PathLower != null)
                {
                    WriteProperty("path_lower", value.PathLower, writer, enc.StringEncoder.Instance);
                }
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="SharedFolderMetadata" />.</para>
        /// </summary>
        private class SharedFolderMetadataDecoder : enc.UnionDecoder<SharedFolderMetadata>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="SharedFolderMetadata" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override SharedFolderMetadata Create()
            {
                return new SharedFolderMetadata();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override SharedFolderMetadata Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "basic":
                        return BasicSharedFolderMetadata.Decoder.DecodeFields(reader);
                    case "full":
                        return FullSharedFolderMetadata.Decoder.DecodeFields(reader);
                    default:
                        throw new sys.InvalidOperationException();
                }
            }
            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(SharedFolderMetadata value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "name":
                        value.Name = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "id":
                        value.Id = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "access_type":
                        value.AccessType = AccessLevel.Decoder.Decode(reader);
                        break;
                    case "is_team_folder":
                        value.IsTeamFolder = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    case "policy":
                        value.Policy = FolderPolicy.Decoder.Decode(reader);
                        break;
                    case "path_lower":
                        value.PathLower = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    default:
                        SkipProperty(reader);
                        break;
                }
            }
        }

        #endregion
    }
}

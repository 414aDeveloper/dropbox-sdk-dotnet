// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Common
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The path root object</para>
    /// </summary>
    public class PathRoot
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<PathRoot> Encoder = new PathRootEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<PathRoot> Decoder = new PathRootDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="PathRoot" /> class.</para>
        /// </summary>
        public PathRoot()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Home</para>
        /// </summary>
        public bool IsHome
        {
            get
            {
                return this is Home;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Home, or <c>null</c>.</para>
        /// </summary>
        public Home AsHome
        {
            get
            {
                return this as Home;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is MemberHome</para>
        /// </summary>
        public bool IsMemberHome
        {
            get
            {
                return this is MemberHome;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a MemberHome, or <c>null</c>.</para>
        /// </summary>
        public MemberHome AsMemberHome
        {
            get
            {
                return this as MemberHome;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Team</para>
        /// </summary>
        public bool IsTeam
        {
            get
            {
                return this is Team;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Team, or <c>null</c>.</para>
        /// </summary>
        public Team AsTeam
        {
            get
            {
                return this as Team;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is UserHome</para>
        /// </summary>
        public bool IsUserHome
        {
            get
            {
                return this is UserHome;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a UserHome, or <c>null</c>.</para>
        /// </summary>
        public UserHome AsUserHome
        {
            get
            {
                return this as UserHome;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is SharedFolder</para>
        /// </summary>
        public bool IsSharedFolder
        {
            get
            {
                return this is SharedFolder;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a SharedFolder, or <c>null</c>.</para>
        /// </summary>
        public SharedFolder AsSharedFolder
        {
            get
            {
                return this as SharedFolder;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="PathRoot" />.</para>
        /// </summary>
        private class PathRootEncoder : enc.StructEncoder<PathRoot>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(PathRoot value, enc.IJsonWriter writer)
            {
                if (value is Home)
                {
                    WriteProperty(".tag", "home", writer, enc.StringEncoder.Instance);
                    Home.Encoder.EncodeFields((Home)value, writer);
                    return;
                }
                if (value is MemberHome)
                {
                    WriteProperty(".tag", "member_home", writer, enc.StringEncoder.Instance);
                    MemberHome.Encoder.EncodeFields((MemberHome)value, writer);
                    return;
                }
                if (value is Team)
                {
                    WriteProperty(".tag", "team", writer, enc.StringEncoder.Instance);
                    Team.Encoder.EncodeFields((Team)value, writer);
                    return;
                }
                if (value is UserHome)
                {
                    WriteProperty(".tag", "user_home", writer, enc.StringEncoder.Instance);
                    UserHome.Encoder.EncodeFields((UserHome)value, writer);
                    return;
                }
                if (value is SharedFolder)
                {
                    WriteProperty(".tag", "shared_folder", writer, enc.StringEncoder.Instance);
                    SharedFolder.Encoder.EncodeFields((SharedFolder)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="PathRoot" />.</para>
        /// </summary>
        private class PathRootDecoder : enc.UnionDecoder<PathRoot>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="PathRoot" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override PathRoot Create()
            {
                return new PathRoot();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override PathRoot Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "home":
                        return Home.Decoder.DecodeFields(reader);
                    case "member_home":
                        return MemberHome.Decoder.DecodeFields(reader);
                    case "team":
                        return Team.Decoder.DecodeFields(reader);
                    case "user_home":
                        return UserHome.Decoder.DecodeFields(reader);
                    case "shared_folder":
                        return SharedFolder.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>Paths are relative to the authenticating user's home directory, whether or
        /// not that user belongs to a team.</para>
        /// </summary>
        public sealed class Home : PathRoot
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Home> Encoder = new HomeEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Home> Decoder = new HomeDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Home" /> class.</para>
            /// </summary>
            private Home()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Home</para>
            /// </summary>
            public static readonly Home Instance = new Home();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Home" />.</para>
            /// </summary>
            private class HomeEncoder : enc.StructEncoder<Home>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Home value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Home" />.</para>
            /// </summary>
            private class HomeDecoder : enc.StructDecoder<Home>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Home" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Home Create()
                {
                    return Home.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Paths are relative to the authenticating team member's home directory. (This
        /// results in :field:`PathRootError.invalid' if the user does not belong to a
        /// team.)</para>
        /// </summary>
        public sealed class MemberHome : PathRoot
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<MemberHome> Encoder = new MemberHomeEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<MemberHome> Decoder = new MemberHomeDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="MemberHome" /> class.</para>
            /// </summary>
            private MemberHome()
            {
            }

            /// <summary>
            /// <para>A singleton instance of MemberHome</para>
            /// </summary>
            public static readonly MemberHome Instance = new MemberHome();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="MemberHome" />.</para>
            /// </summary>
            private class MemberHomeEncoder : enc.StructEncoder<MemberHome>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(MemberHome value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="MemberHome" />.</para>
            /// </summary>
            private class MemberHomeDecoder : enc.StructDecoder<MemberHome>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="MemberHome" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override MemberHome Create()
                {
                    return MemberHome.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Paths are relative to the given team directory. (This results in <see
        /// cref="Dropbox.Api.Common.PathRootError.Invalid" /> if the user is not a member of
        /// the team associated with that path root id.)</para>
        /// </summary>
        public sealed class Team : PathRoot
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Team> Encoder = new TeamEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Team> Decoder = new TeamDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Team" /> class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public Team(string value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Team" /> class.</para>
            /// </summary>
            private Team()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public string Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Team" />.</para>
            /// </summary>
            private class TeamEncoder : enc.StructEncoder<Team>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Team value, enc.IJsonWriter writer)
                {
                    WriteProperty("team", value.Value, writer, enc.StringEncoder.Instance);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Team" />.</para>
            /// </summary>
            private class TeamDecoder : enc.StructDecoder<Team>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Team" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Team Create()
                {
                    return new Team();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(Team value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "team":
                            value.Value = enc.StringDecoder.Instance.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>Paths are relative to the user's home directory. (This results in <see
        /// cref="Dropbox.Api.Common.PathRootError.Invalid" /> if the belongs to a
        /// team.)</para>
        /// </summary>
        public sealed class UserHome : PathRoot
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<UserHome> Encoder = new UserHomeEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<UserHome> Decoder = new UserHomeDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="UserHome" /> class.</para>
            /// </summary>
            private UserHome()
            {
            }

            /// <summary>
            /// <para>A singleton instance of UserHome</para>
            /// </summary>
            public static readonly UserHome Instance = new UserHome();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="UserHome" />.</para>
            /// </summary>
            private class UserHomeEncoder : enc.StructEncoder<UserHome>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(UserHome value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="UserHome" />.</para>
            /// </summary>
            private class UserHomeDecoder : enc.StructDecoder<UserHome>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="UserHome" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override UserHome Create()
                {
                    return UserHome.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Paths are relative to given shared folder id (This results in <see
        /// cref="Dropbox.Api.Common.PathRootError.NoPermission" /> if you don't have access to
        /// this shared folder.)</para>
        /// </summary>
        public sealed class SharedFolder : PathRoot
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<SharedFolder> Encoder = new SharedFolderEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<SharedFolder> Decoder = new SharedFolderDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="SharedFolder" />
            /// class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public SharedFolder(string value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="SharedFolder" />
            /// class.</para>
            /// </summary>
            private SharedFolder()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public string Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="SharedFolder" />.</para>
            /// </summary>
            private class SharedFolderEncoder : enc.StructEncoder<SharedFolder>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(SharedFolder value, enc.IJsonWriter writer)
                {
                    WriteProperty("shared_folder", value.Value, writer, enc.StringEncoder.Instance);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="SharedFolder" />.</para>
            /// </summary>
            private class SharedFolderDecoder : enc.StructDecoder<SharedFolder>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="SharedFolder" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override SharedFolder Create()
                {
                    return new SharedFolder();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(SharedFolder value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "shared_folder":
                            value.Value = enc.StringDecoder.Instance.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : PathRoot
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}

// <auto-generated>
// Auto-generated by BabelAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Babel;

    /// <summary>
    /// <para>The list folder longpoll arg object</para>
    /// </summary>
    public sealed class ListFolderLongpollArg : enc.IEncodable<ListFolderLongpollArg>
    {
        /// <summary>
        /// <para>Initializes a new instance of the <see cref="ListFolderLongpollArg" />
        /// class.</para>
        /// </summary>
        /// <param name="cursor">A cursor as returned by <see
        /// cref="Dropbox.Api.Files.Routes.FilesRoutes.ListFolderAsync" /> or <see
        /// cref="Dropbox.Api.Files.Routes.FilesRoutes.ListFolderContinueAsync" /></param>
        /// <param name="timeout">A timeout in seconds. The request will block for at most this
        /// length of time, plus up to 90 seconds of random jitter added to avoid the
        /// thundering herd problem. Care should be taken when using this parameter, as some
        /// network infrastructure does not support long timeouts.</param>
        public ListFolderLongpollArg(string cursor,
                                     ulong timeout = 30)
        {
            if (cursor == null)
            {
                throw new sys.ArgumentNullException("cursor");
            }

            if (timeout < 30UL || timeout > 480UL)
            {
                throw new sys.ArgumentOutOfRangeException("timeout");
            }

            this.Cursor = cursor;
            this.Timeout = timeout;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="ListFolderLongpollArg" />
        /// class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        public ListFolderLongpollArg()
        {
            this.Timeout = 30;
        }

        /// <summary>
        /// <para>A cursor as returned by <see
        /// cref="Dropbox.Api.Files.Routes.FilesRoutes.ListFolderAsync" /> or <see
        /// cref="Dropbox.Api.Files.Routes.FilesRoutes.ListFolderContinueAsync" /></para>
        /// </summary>
        public string Cursor { get; private set; }

        /// <summary>
        /// <para>A timeout in seconds. The request will block for at most this length of time,
        /// plus up to 90 seconds of random jitter added to avoid the thundering herd problem.
        /// Care should be taken when using this parameter, as some network infrastructure does
        /// not support long timeouts.</para>
        /// </summary>
        public ulong Timeout { get; private set; }

        #region IEncodable<ListFolderLongpollArg> methods

        /// <summary>
        /// <para>Encodes the object using the supplied encoder.</para>
        /// </summary>
        /// <param name="encoder">The encoder being used to serialize the object.</param>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        void enc.IEncodable<ListFolderLongpollArg>.Encode(enc.IEncoder encoder)
        {
            using (var obj = encoder.AddObject())
            {
                obj.AddField<string>("cursor", this.Cursor);
                obj.AddField<ulong>("timeout", this.Timeout);
            }
        }

        /// <summary>
        /// <para>Decodes on object using the supplied decoder.</para>
        /// </summary>
        /// <param name="decoder">The decoder used to deserialize the object.</param>
        /// <returns>The deserialized object. Note: this is not necessarily the current
        /// instance.</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        ListFolderLongpollArg enc.IEncodable<ListFolderLongpollArg>.Decode(enc.IDecoder decoder)
        {
            using (var obj = decoder.GetObject())
            {
                this.Cursor = obj.GetField<string>("cursor");
                if (obj.HasField("timeout"))
                {
                    this.Timeout = obj.GetField<ulong>("timeout");
                }
            }

            return this;
        }

        #endregion
    }
}

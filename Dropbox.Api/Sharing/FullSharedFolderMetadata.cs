// <auto-generated>
// Auto-generated by BabelAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Sharing
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Babel;

    /// <summary>
    /// <para>The full metadata for the shared folder which includes user and group
    /// membership.</para>
    /// </summary>
    /// <seealso cref="SharedFolderMetadata" />
    public class FullSharedFolderMetadata : SharedFolderMetadata
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<FullSharedFolderMetadata> Encoder = new FullSharedFolderMetadataEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<FullSharedFolderMetadata> Decoder = new FullSharedFolderMetadataDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="FullSharedFolderMetadata" />
        /// class.</para>
        /// </summary>
        /// <param name="name">The name of the this shared folder.</param>
        /// <param name="id">The ID of the shared folder.</param>
        /// <param name="accessType">The current user's access level for this shared
        /// folder.</param>
        /// <param name="isTeamFolder">Whether this folder is a <a
        /// href="https://www.dropbox.com/en/help/986">team folder</a>.</param>
        /// <param name="policy">Policies governing this shared folder.</param>
        /// <param name="membership">The list of user members of the shared folder.</param>
        /// <param name="groups">The list of group members of the shared folder.</param>
        /// <param name="invitees">The list of non-Dropbox users invited to join the shared
        /// folder.</param>
        /// <param name="pathLower">The lower-cased full path of this shared folder. Absent for
        /// unmounted folders.</param>
        public FullSharedFolderMetadata(string name,
                                        string id,
                                        AccessLevel accessType,
                                        bool isTeamFolder,
                                        FolderPolicy policy,
                                        col.IEnumerable<UserMembershipInfo> membership,
                                        col.IEnumerable<GroupMembershipInfo> groups,
                                        col.IEnumerable<InviteeMembershipInfo> invitees,
                                        string pathLower = null)
            : base(name, id, accessType, isTeamFolder, policy, pathLower)
        {
            var membershipList = new col.List<UserMembershipInfo>(membership ?? new UserMembershipInfo[0]);

            if (membership == null)
            {
                throw new sys.ArgumentNullException("membership");
            }

            var groupsList = new col.List<GroupMembershipInfo>(groups ?? new GroupMembershipInfo[0]);

            if (groups == null)
            {
                throw new sys.ArgumentNullException("groups");
            }

            var inviteesList = new col.List<InviteeMembershipInfo>(invitees ?? new InviteeMembershipInfo[0]);

            if (invitees == null)
            {
                throw new sys.ArgumentNullException("invitees");
            }

            this.Membership = membershipList;
            this.Groups = groupsList;
            this.Invitees = inviteesList;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="FullSharedFolderMetadata" />
        /// class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        public FullSharedFolderMetadata()
        {
        }

        /// <summary>
        /// <para>The list of user members of the shared folder.</para>
        /// </summary>
        public col.IList<UserMembershipInfo> Membership { get; protected set; }

        /// <summary>
        /// <para>The list of group members of the shared folder.</para>
        /// </summary>
        public col.IList<GroupMembershipInfo> Groups { get; protected set; }

        /// <summary>
        /// <para>The list of non-Dropbox users invited to join the shared folder.</para>
        /// </summary>
        public col.IList<InviteeMembershipInfo> Invitees { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="FullSharedFolderMetadata" />.</para>
        /// </summary>
        private class FullSharedFolderMetadataEncoder : enc.StructEncoder<FullSharedFolderMetadata>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(FullSharedFolderMetadata value, enc.IJsonWriter writer)
            {
                WriteProperty("name", value.Name, writer, enc.StringEncoder.Instance);
                WriteProperty("id", value.Id, writer, enc.StringEncoder.Instance);
                WriteProperty("access_type", value.AccessType, writer, AccessLevel.Encoder);
                WriteProperty("is_team_folder", value.IsTeamFolder, writer, enc.BooleanEncoder.Instance);
                WriteProperty("policy", value.Policy, writer, FolderPolicy.Encoder);
                WriteListProperty("membership", value.Membership, writer, UserMembershipInfo.Encoder);
                WriteListProperty("groups", value.Groups, writer, GroupMembershipInfo.Encoder);
                WriteListProperty("invitees", value.Invitees, writer, InviteeMembershipInfo.Encoder);
                if (value.PathLower != null)
                {
                    WriteProperty("path_lower", value.PathLower, writer, enc.StringEncoder.Instance);
                }
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="FullSharedFolderMetadata" />.</para>
        /// </summary>
        private class FullSharedFolderMetadataDecoder : enc.StructDecoder<FullSharedFolderMetadata>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="FullSharedFolderMetadata"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override FullSharedFolderMetadata Create()
            {
                return new FullSharedFolderMetadata();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(FullSharedFolderMetadata value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "name":
                        value.Name = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "id":
                        value.Id = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "access_type":
                        value.AccessType = AccessLevel.Decoder.Decode(reader);
                        break;
                    case "is_team_folder":
                        value.IsTeamFolder = enc.BooleanDecoder.Instance.Decode(reader);
                        break;
                    case "policy":
                        value.Policy = FolderPolicy.Decoder.Decode(reader);
                        break;
                    case "membership":
                        value.Membership = ReadList(reader, UserMembershipInfo.Decoder);
                        break;
                    case "groups":
                        value.Groups = ReadList(reader, GroupMembershipInfo.Decoder);
                        break;
                    case "invitees":
                        value.Invitees = ReadList(reader, InviteeMembershipInfo.Decoder);
                        break;
                    case "path_lower":
                        value.PathLower = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    default:
                        SkipProperty(reader);
                        break;
                }
            }
        }

        #endregion
    }
}

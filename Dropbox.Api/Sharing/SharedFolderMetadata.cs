// <auto-generated>
// Auto-generated by BabelAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Sharing
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Babel;

    /// <summary>
    /// <para>The base type for shared folder metadata.</para>
    /// </summary>
    /// <seealso cref="BasicSharedFolderMetadata" />
    /// <seealso cref="FullSharedFolderMetadata" />
    public class SharedFolderMetadata : enc.IEncodable<SharedFolderMetadata>
    {
        /// <summary>
        /// <para>Initializes a new instance of the <see cref="SharedFolderMetadata" />
        /// class.</para>
        /// </summary>
        /// <param name="pathLower">The lower-cased full path of this shared folder.</param>
        /// <param name="name">The name of the this shared folder.</param>
        /// <param name="id">The ID of the shared folder.</param>
        /// <param name="accessType">Who can access this shared folder.</param>
        /// <param name="sharedLinkPolicy">Who links can be shared with.</param>
        protected SharedFolderMetadata(string pathLower,
                                       string name,
                                       string id,
                                       AccessType accessType,
                                       SharedLinkPolicy sharedLinkPolicy)
        {
            if (pathLower == null)
            {
                throw new sys.ArgumentNullException("pathLower");
            }

            if (name == null)
            {
                throw new sys.ArgumentNullException("name");
            }

            if (id == null)
            {
                throw new sys.ArgumentNullException("id");
            }
            else if (!re.Regex.IsMatch(id, @"[-_0-9a-zA-Z]+"))
            {
                throw new sys.ArgumentOutOfRangeException("id");
            }

            if (accessType == null)
            {
                throw new sys.ArgumentNullException("accessType");
            }

            if (sharedLinkPolicy == null)
            {
                throw new sys.ArgumentNullException("sharedLinkPolicy");
            }

            this.PathLower = pathLower;
            this.Name = name;
            this.Id = id;
            this.AccessType = accessType;
            this.SharedLinkPolicy = sharedLinkPolicy;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="SharedFolderMetadata" />
        /// class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        public SharedFolderMetadata()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Basic</para>
        /// </summary>
        public bool IsBasic
        {
            get
            {
                return this is BasicSharedFolderMetadata;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a <see cref="BasicSharedFolderMetadata" />, or
        /// <c>null</c>.</para>
        /// </summary>
        public BasicSharedFolderMetadata AsBasic
        {
            get
            {
                return this as BasicSharedFolderMetadata;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Full</para>
        /// </summary>
        public bool IsFull
        {
            get
            {
                return this is FullSharedFolderMetadata;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a <see cref="FullSharedFolderMetadata" />, or
        /// <c>null</c>.</para>
        /// </summary>
        public FullSharedFolderMetadata AsFull
        {
            get
            {
                return this as FullSharedFolderMetadata;
            }
        }

        /// <summary>
        /// <para>The lower-cased full path of this shared folder.</para>
        /// </summary>
        public string PathLower { get; protected set; }

        /// <summary>
        /// <para>The name of the this shared folder.</para>
        /// </summary>
        public string Name { get; protected set; }

        /// <summary>
        /// <para>The ID of the shared folder.</para>
        /// </summary>
        public string Id { get; protected set; }

        /// <summary>
        /// <para>Who can access this shared folder.</para>
        /// </summary>
        public AccessType AccessType { get; protected set; }

        /// <summary>
        /// <para>Who links can be shared with.</para>
        /// </summary>
        public SharedLinkPolicy SharedLinkPolicy { get; protected set; }

        #region IEncodable<SharedFolderMetadata> methods

        /// <summary>
        /// <para>Encodes the object using the supplied encoder.</para>
        /// </summary>
        /// <param name="encoder">The encoder being used to serialize the object.</param>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        void enc.IEncodable<SharedFolderMetadata>.Encode(enc.IEncoder encoder)
        {
            if (this.IsBasic)
            {
                ((enc.IEncodable<BasicSharedFolderMetadata>)this.AsBasic).Encode(encoder);
            }
            else if (this.IsFull)
            {
                ((enc.IEncodable<FullSharedFolderMetadata>)this.AsFull).Encode(encoder);
            }
            else
            {
                throw new sys.InvalidOperationException();
            }
        }

        /// <summary>
        /// <para>Decodes on object using the supplied decoder.</para>
        /// </summary>
        /// <param name="decoder">The decoder used to deserialize the object.</param>
        /// <returns>The deserialized object. Note: this is not necessarily the current
        /// instance.</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        SharedFolderMetadata enc.IEncodable<SharedFolderMetadata>.Decode(enc.IDecoder decoder)
        {
            var tag = string.Empty;
            using (var obj = decoder.GetObject())
            {
                tag = obj.GetField<string>(".tag");
            }

            switch (tag)
            {
            case "basic":
                var basic = new BasicSharedFolderMetadata();
                return ((enc.IEncodable<BasicSharedFolderMetadata>)basic).Decode(decoder);
            case "full":
                var full = new FullSharedFolderMetadata();
                return ((enc.IEncodable<FullSharedFolderMetadata>)full).Decode(decoder);
            default:
                throw new sys.InvalidOperationException();
            }
        }

        #endregion
    }
}

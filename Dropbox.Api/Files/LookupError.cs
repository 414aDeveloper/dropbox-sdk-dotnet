// <auto-generated>
// Auto-generated by BabelAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Babel;

    /// <summary>
    /// <para>The lookup error object</para>
    /// </summary>
    public class LookupError : enc.IEncodable<LookupError>
    {
        /// <summary>
        /// <para>Initializes a new instance of the <see cref="LookupError" /> class.</para>
        /// </summary>
        public LookupError()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is MalformedPath</para>
        /// </summary>
        public bool IsMalformedPath
        {
            get
            {
                return this is MalformedPath;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a MalformedPath, or <c>null</c>.</para>
        /// </summary>
        public MalformedPath AsMalformedPath
        {
            get
            {
                return this as MalformedPath;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is NotFound</para>
        /// </summary>
        public bool IsNotFound
        {
            get
            {
                return this is NotFound;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a NotFound, or <c>null</c>.</para>
        /// </summary>
        public NotFound AsNotFound
        {
            get
            {
                return this as NotFound;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is NotFile</para>
        /// </summary>
        public bool IsNotFile
        {
            get
            {
                return this is NotFile;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a NotFile, or <c>null</c>.</para>
        /// </summary>
        public NotFile AsNotFile
        {
            get
            {
                return this as NotFile;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is NotFolder</para>
        /// </summary>
        public bool IsNotFolder
        {
            get
            {
                return this is NotFolder;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a NotFolder, or <c>null</c>.</para>
        /// </summary>
        public NotFolder AsNotFolder
        {
            get
            {
                return this as NotFolder;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is RestrictedContent</para>
        /// </summary>
        public bool IsRestrictedContent
        {
            get
            {
                return this is RestrictedContent;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a RestrictedContent, or <c>null</c>.</para>
        /// </summary>
        public RestrictedContent AsRestrictedContent
        {
            get
            {
                return this as RestrictedContent;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region IEncodable<LookupError> methods

        /// <summary>
        /// <para>Encodes the object using the supplied encoder.</para>
        /// </summary>
        /// <param name="encoder">The encoder being used to serialize the object.</param>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        void enc.IEncodable<LookupError>.Encode(enc.IEncoder encoder)
        {
            if (this.IsMalformedPath)
            {
                ((enc.IEncodable<MalformedPath>)this).Encode(encoder);
            }
            else if (this.IsNotFound)
            {
                ((enc.IEncodable<NotFound>)this).Encode(encoder);
            }
            else if (this.IsNotFile)
            {
                ((enc.IEncodable<NotFile>)this).Encode(encoder);
            }
            else if (this.IsNotFolder)
            {
                ((enc.IEncodable<NotFolder>)this).Encode(encoder);
            }
            else if (this.IsRestrictedContent)
            {
                ((enc.IEncodable<RestrictedContent>)this).Encode(encoder);
            }
            else
            {
                ((enc.IEncodable<Other>)this).Encode(encoder);
            }
        }

        /// <summary>
        /// <para>Decodes on object using the supplied decoder.</para>
        /// </summary>
        /// <param name="decoder">The decoder used to deserialize the object.</param>
        /// <returns>The deserialized object. Note: this is not necessarily the current
        /// instance.</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        LookupError enc.IEncodable<LookupError>.Decode(enc.IDecoder decoder)
        {
            switch (decoder.GetUnionName())
            {
            case "malformed_path":
                using (var obj = decoder.GetObject())
                {
                    return new MalformedPath(obj.GetField<string>("malformed_path"));
                }
            case "not_found":
                return NotFound.Instance;
            case "not_file":
                return NotFile.Instance;
            case "not_folder":
                return NotFolder.Instance;
            case "restricted_content":
                return RestrictedContent.Instance;
            default:
                return Other.Instance;
            }
        }

        #endregion

        /// <summary>
        /// <para>The malformed path object</para>
        /// </summary>
        public sealed class MalformedPath : LookupError, enc.IEncodable<MalformedPath>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="MalformedPath" />
            /// class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public MalformedPath(string value)
            {
                this.Value = value;
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public string Value { get; private set; }

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            void enc.IEncodable<MalformedPath>.Encode(enc.IEncoder encoder)
            {
                using (var obj = encoder.AddObject())
                {
                    obj.AddField(".tag", "malformed_path");
                    obj.AddField("malformed_path", this.Value);
                }
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            MalformedPath enc.IEncodable<MalformedPath>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }

        /// <summary>
        /// <para>There is nothing at the given path.</para>
        /// </summary>
        public sealed class NotFound : LookupError, enc.IEncodable<NotFound>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="NotFound" /> class.</para>
            /// </summary>
            private NotFound()
            {
            }

            /// <summary>
            /// <para>A singleton instance of NotFound</para>
            /// </summary>
            public static readonly NotFound Instance = new NotFound();

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            void enc.IEncodable<NotFound>.Encode(enc.IEncoder encoder)
            {
                using (var obj = encoder.AddObject())
                {
                    obj.AddField(".tag", "not_found");
                }
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            NotFound enc.IEncodable<NotFound>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }

        /// <summary>
        /// <para>We were expecting a file, but the given path refers to something that isn't a
        /// file.</para>
        /// </summary>
        public sealed class NotFile : LookupError, enc.IEncodable<NotFile>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="NotFile" /> class.</para>
            /// </summary>
            private NotFile()
            {
            }

            /// <summary>
            /// <para>A singleton instance of NotFile</para>
            /// </summary>
            public static readonly NotFile Instance = new NotFile();

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            void enc.IEncodable<NotFile>.Encode(enc.IEncoder encoder)
            {
                using (var obj = encoder.AddObject())
                {
                    obj.AddField(".tag", "not_file");
                }
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            NotFile enc.IEncodable<NotFile>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }

        /// <summary>
        /// <para>We were expecting a folder, but the given path refers to something that isn't
        /// a folder.</para>
        /// </summary>
        public sealed class NotFolder : LookupError, enc.IEncodable<NotFolder>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="NotFolder" /> class.</para>
            /// </summary>
            private NotFolder()
            {
            }

            /// <summary>
            /// <para>A singleton instance of NotFolder</para>
            /// </summary>
            public static readonly NotFolder Instance = new NotFolder();

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            void enc.IEncodable<NotFolder>.Encode(enc.IEncoder encoder)
            {
                using (var obj = encoder.AddObject())
                {
                    obj.AddField(".tag", "not_folder");
                }
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            NotFolder enc.IEncodable<NotFolder>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }

        /// <summary>
        /// <para>The file cannot be transferred because the content is restricted.  For
        /// example, sometimes there are legal restrictions due to copyright claims.</para>
        /// </summary>
        public sealed class RestrictedContent : LookupError, enc.IEncodable<RestrictedContent>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="RestrictedContent" />
            /// class.</para>
            /// </summary>
            private RestrictedContent()
            {
            }

            /// <summary>
            /// <para>A singleton instance of RestrictedContent</para>
            /// </summary>
            public static readonly RestrictedContent Instance = new RestrictedContent();

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            void enc.IEncodable<RestrictedContent>.Encode(enc.IEncoder encoder)
            {
                using (var obj = encoder.AddObject())
                {
                    obj.AddField(".tag", "restricted_content");
                }
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            RestrictedContent enc.IEncodable<RestrictedContent>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : LookupError, enc.IEncodable<Other>
        {
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            /// <summary>
            /// <para>Encodes the object using the supplied encoder.</para>
            /// </summary>
            /// <param name="encoder">The encoder being used to serialize the object.</param>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            void enc.IEncodable<Other>.Encode(enc.IEncoder encoder)
            {
                using (var obj = encoder.AddObject())
                {
                    obj.AddField(".tag", "other");
                }
            }

            /// <summary>
            /// <para>Decodes on object using the supplied decoder.</para>
            /// </summary>
            /// <param name="decoder">The decoder used to deserialize the object.</param>
            /// <returns>The deserialized object. Note: this is not necessarily the current
            /// instance.</returns>
            [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
            Other enc.IEncodable<Other>.Decode(enc.IDecoder decoder)
            {
                throw new sys.InvalidOperationException("Decoding happens through the base class");
            }
        }
    }
}
